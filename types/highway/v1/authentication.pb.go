// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: highway/v1/authentication.proto

// Package Motor is used for defining a Motor node and its properties.

package highwayv1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/sonrhq/core/types/common"
	types "github.com/sonrhq/core/x/identity/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RegisterStartRequest is the request to register a new account.
type RegisterStartRequest struct {
	// The origin of the request. This is used to query the Blockchain for the Service DID.
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// The user defined label for the device.
	DeviceLabel string `protobuf:"bytes,2,opt,name=device_label,json=deviceLabel,proto3" json:"device_label,omitempty"`
	// The security threshold for the wallet account.
	SecurityThreshold int32 `protobuf:"varint,3,opt,name=security_threshold,json=securityThreshold,proto3" json:"security_threshold,omitempty"`
	// The Unique Identifier for the client device. Typically in a cookie.
	Uuid string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *RegisterStartRequest) Reset()         { *m = RegisterStartRequest{} }
func (m *RegisterStartRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterStartRequest) ProtoMessage()    {}
func (*RegisterStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3835402d92d52e5, []int{0}
}
func (m *RegisterStartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterStartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterStartRequest.Merge(m, src)
}
func (m *RegisterStartRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterStartRequest proto.InternalMessageInfo

func (m *RegisterStartRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *RegisterStartRequest) GetDeviceLabel() string {
	if m != nil {
		return m.DeviceLabel
	}
	return ""
}

func (m *RegisterStartRequest) GetSecurityThreshold() int32 {
	if m != nil {
		return m.SecurityThreshold
	}
	return 0
}

func (m *RegisterStartRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

// RegisterStartResponse is the response to a Register request.
type RegisterStartResponse struct {
	// Credential options for the user to sign with WebAuthn.
	CreationOptions string `protobuf:"bytes,1,opt,name=creation_options,json=creationOptions,proto3" json:"creation_options,omitempty"`
	// Relaying party id for the request.
	RpId string `protobuf:"bytes,2,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	// Relaying party name for the request.
	RpName string `protobuf:"bytes,3,opt,name=rp_name,json=rpName,proto3" json:"rp_name,omitempty"`
}

func (m *RegisterStartResponse) Reset()         { *m = RegisterStartResponse{} }
func (m *RegisterStartResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterStartResponse) ProtoMessage()    {}
func (*RegisterStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3835402d92d52e5, []int{1}
}
func (m *RegisterStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterStartResponse.Merge(m, src)
}
func (m *RegisterStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterStartResponse proto.InternalMessageInfo

func (m *RegisterStartResponse) GetCreationOptions() string {
	if m != nil {
		return m.CreationOptions
	}
	return ""
}

func (m *RegisterStartResponse) GetRpId() string {
	if m != nil {
		return m.RpId
	}
	return ""
}

func (m *RegisterStartResponse) GetRpName() string {
	if m != nil {
		return m.RpName
	}
	return ""
}

// RegisterFinishRequest is the request to CreateAccount a new key from the private key.
type RegisterFinishRequest struct {
	// The previously generated session id.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The signed credential response from the user.
	CredentialResponse string `protobuf:"bytes,2,opt,name=credential_response,json=credentialResponse,proto3" json:"credential_response,omitempty"`
	// The origin of the request. This is used to query the Blockchain for the Service DID.
	Origin string `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (m *RegisterFinishRequest) Reset()         { *m = RegisterFinishRequest{} }
func (m *RegisterFinishRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterFinishRequest) ProtoMessage()    {}
func (*RegisterFinishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3835402d92d52e5, []int{2}
}
func (m *RegisterFinishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterFinishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterFinishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterFinishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterFinishRequest.Merge(m, src)
}
func (m *RegisterFinishRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterFinishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterFinishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterFinishRequest proto.InternalMessageInfo

func (m *RegisterFinishRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *RegisterFinishRequest) GetCredentialResponse() string {
	if m != nil {
		return m.CredentialResponse
	}
	return ""
}

func (m *RegisterFinishRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

// RegisterFinishResponse is the response to a CreateAccount request.
type RegisterFinishResponse struct {
	// The id of the account.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The address of the account.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Relaying party id for the request.
	RpId string `protobuf:"bytes,3,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	// Relaying party name for the request.
	RpName string `protobuf:"bytes,4,opt,name=rp_name,json=rpName,proto3" json:"rp_name,omitempty"`
	// The DID Document for the wallet.
	DidDocument *types.DidDocument `protobuf:"bytes,5,opt,name=did_document,json=didDocument,proto3" json:"did_document,omitempty"`
	// The UCAN token authorization header for subsequent requests.
	UcanTokenHeader []byte `protobuf:"bytes,7,opt,name=ucan_token_header,json=ucanTokenHeader,proto3" json:"ucan_token_header,omitempty"`
}

func (m *RegisterFinishResponse) Reset()         { *m = RegisterFinishResponse{} }
func (m *RegisterFinishResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterFinishResponse) ProtoMessage()    {}
func (*RegisterFinishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3835402d92d52e5, []int{3}
}
func (m *RegisterFinishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterFinishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterFinishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterFinishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterFinishResponse.Merge(m, src)
}
func (m *RegisterFinishResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterFinishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterFinishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterFinishResponse proto.InternalMessageInfo

func (m *RegisterFinishResponse) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RegisterFinishResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RegisterFinishResponse) GetRpId() string {
	if m != nil {
		return m.RpId
	}
	return ""
}

func (m *RegisterFinishResponse) GetRpName() string {
	if m != nil {
		return m.RpName
	}
	return ""
}

func (m *RegisterFinishResponse) GetDidDocument() *types.DidDocument {
	if m != nil {
		return m.DidDocument
	}
	return nil
}

func (m *RegisterFinishResponse) GetUcanTokenHeader() []byte {
	if m != nil {
		return m.UcanTokenHeader
	}
	return nil
}

// LoginStartRequest is the request to login to an account.
type LoginStartRequest struct {
	// The origin of the request. This is used to query the Blockchain for the Service DID.
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// The Sonr account address for the user.
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
}

func (m *LoginStartRequest) Reset()         { *m = LoginStartRequest{} }
func (m *LoginStartRequest) String() string { return proto.CompactTextString(m) }
func (*LoginStartRequest) ProtoMessage()    {}
func (*LoginStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3835402d92d52e5, []int{4}
}
func (m *LoginStartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginStartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginStartRequest.Merge(m, src)
}
func (m *LoginStartRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoginStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginStartRequest proto.InternalMessageInfo

func (m *LoginStartRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *LoginStartRequest) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

// LoginStartResponse is the response to a Login request.
type LoginStartResponse struct {
	// Success is true if the account exists.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The account address for the user.
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	// Json encoded WebAuthn credential options for the user to sign with.
	CredentialOptions string `protobuf:"bytes,3,opt,name=credential_options,json=credentialOptions,proto3" json:"credential_options,omitempty"`
	// Relaying party id for the request.
	RpId string `protobuf:"bytes,4,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	// Relaying party name for the request.
	RpName string `protobuf:"bytes,5,opt,name=rp_name,json=rpName,proto3" json:"rp_name,omitempty"`
}

func (m *LoginStartResponse) Reset()         { *m = LoginStartResponse{} }
func (m *LoginStartResponse) String() string { return proto.CompactTextString(m) }
func (*LoginStartResponse) ProtoMessage()    {}
func (*LoginStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3835402d92d52e5, []int{5}
}
func (m *LoginStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginStartResponse.Merge(m, src)
}
func (m *LoginStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginStartResponse proto.InternalMessageInfo

func (m *LoginStartResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *LoginStartResponse) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

func (m *LoginStartResponse) GetCredentialOptions() string {
	if m != nil {
		return m.CredentialOptions
	}
	return ""
}

func (m *LoginStartResponse) GetRpId() string {
	if m != nil {
		return m.RpId
	}
	return ""
}

func (m *LoginStartResponse) GetRpName() string {
	if m != nil {
		return m.RpName
	}
	return ""
}

// LoginFinishRequest is the request to login to an account.
type LoginFinishRequest struct {
	// Address of the account to login to.
	AccountAddress string `protobuf:"bytes,1,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	// The signed credential response from the user.
	CredentialResponse string `protobuf:"bytes,2,opt,name=credential_response,json=credentialResponse,proto3" json:"credential_response,omitempty"`
	// The origin of the request. This is used to query the Blockchain for the Service DID.
	Origin string `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (m *LoginFinishRequest) Reset()         { *m = LoginFinishRequest{} }
func (m *LoginFinishRequest) String() string { return proto.CompactTextString(m) }
func (*LoginFinishRequest) ProtoMessage()    {}
func (*LoginFinishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3835402d92d52e5, []int{6}
}
func (m *LoginFinishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginFinishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginFinishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginFinishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginFinishRequest.Merge(m, src)
}
func (m *LoginFinishRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoginFinishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginFinishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginFinishRequest proto.InternalMessageInfo

func (m *LoginFinishRequest) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

func (m *LoginFinishRequest) GetCredentialResponse() string {
	if m != nil {
		return m.CredentialResponse
	}
	return ""
}

func (m *LoginFinishRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

// LoginFinishResponse is the response to a Login request.
type LoginFinishResponse struct {
	// Success is true if the account exists.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The account address for the user.
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	// Relaying party id for the request.
	RpId string `protobuf:"bytes,3,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	// Relaying party name for the request.
	RpName string `protobuf:"bytes,4,opt,name=rp_name,json=rpName,proto3" json:"rp_name,omitempty"`
	// The DID Document for the wallet.
	DidDocument *types.DidDocument `protobuf:"bytes,5,opt,name=did_document,json=didDocument,proto3" json:"did_document,omitempty"`
	// The UCAN token authorization header for subsequent requests.
	UcanTokenHeader []byte `protobuf:"bytes,7,opt,name=ucan_token_header,json=ucanTokenHeader,proto3" json:"ucan_token_header,omitempty"`
}

func (m *LoginFinishResponse) Reset()         { *m = LoginFinishResponse{} }
func (m *LoginFinishResponse) String() string { return proto.CompactTextString(m) }
func (*LoginFinishResponse) ProtoMessage()    {}
func (*LoginFinishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3835402d92d52e5, []int{7}
}
func (m *LoginFinishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginFinishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginFinishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginFinishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginFinishResponse.Merge(m, src)
}
func (m *LoginFinishResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginFinishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginFinishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginFinishResponse proto.InternalMessageInfo

func (m *LoginFinishResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *LoginFinishResponse) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

func (m *LoginFinishResponse) GetRpId() string {
	if m != nil {
		return m.RpId
	}
	return ""
}

func (m *LoginFinishResponse) GetRpName() string {
	if m != nil {
		return m.RpName
	}
	return ""
}

func (m *LoginFinishResponse) GetDidDocument() *types.DidDocument {
	if m != nil {
		return m.DidDocument
	}
	return nil
}

func (m *LoginFinishResponse) GetUcanTokenHeader() []byte {
	if m != nil {
		return m.UcanTokenHeader
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterStartRequest)(nil), "sonrhq.highway.v1.RegisterStartRequest")
	proto.RegisterType((*RegisterStartResponse)(nil), "sonrhq.highway.v1.RegisterStartResponse")
	proto.RegisterType((*RegisterFinishRequest)(nil), "sonrhq.highway.v1.RegisterFinishRequest")
	proto.RegisterType((*RegisterFinishResponse)(nil), "sonrhq.highway.v1.RegisterFinishResponse")
	proto.RegisterType((*LoginStartRequest)(nil), "sonrhq.highway.v1.LoginStartRequest")
	proto.RegisterType((*LoginStartResponse)(nil), "sonrhq.highway.v1.LoginStartResponse")
	proto.RegisterType((*LoginFinishRequest)(nil), "sonrhq.highway.v1.LoginFinishRequest")
	proto.RegisterType((*LoginFinishResponse)(nil), "sonrhq.highway.v1.LoginFinishResponse")
}

func init() { proto.RegisterFile("highway/v1/authentication.proto", fileDescriptor_c3835402d92d52e5) }

var fileDescriptor_c3835402d92d52e5 = []byte{
	// 768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x95, 0x41, 0x4f, 0xdb, 0x48,
	0x14, 0xc7, 0x99, 0x90, 0x90, 0x65, 0xc2, 0x86, 0xcd, 0xb0, 0x0b, 0x56, 0xc4, 0x86, 0x60, 0xc1,
	0x12, 0x58, 0xad, 0xad, 0xb0, 0xb7, 0xdd, 0x13, 0x2b, 0xb4, 0xda, 0x55, 0x51, 0x2b, 0xb9, 0x9c,
	0x7a, 0xb1, 0x8c, 0x67, 0x88, 0x47, 0x4d, 0x66, 0xcc, 0x78, 0x9c, 0x2a, 0x57, 0x0e, 0x1c, 0xab,
	0xaa, 0xed, 0x47, 0xe9, 0x47, 0xe8, 0xa1, 0x47, 0xa4, 0x5e, 0x7a, 0xac, 0x42, 0x3f, 0x44, 0x8f,
	0x95, 0xc7, 0xe3, 0x3a, 0x26, 0xa1, 0x70, 0xe0, 0xd0, 0x9b, 0xe7, 0xbd, 0xe7, 0xf7, 0x7e, 0xef,
	0xcd, 0x5f, 0x6f, 0xe0, 0x46, 0x40, 0x7b, 0xc1, 0x33, 0x6f, 0x64, 0x0f, 0xbb, 0xb6, 0x17, 0xcb,
	0x80, 0x30, 0x49, 0x7d, 0x4f, 0x52, 0xce, 0xac, 0x50, 0x70, 0xc9, 0x51, 0x23, 0xe2, 0x4c, 0x04,
	0x67, 0x96, 0x8e, 0xb3, 0x86, 0xdd, 0xe6, 0x9a, 0xcf, 0x05, 0xb1, 0x29, 0x4e, 0x62, 0xe5, 0xc8,
	0xc6, 0x14, 0xa7, 0xb1, 0xcd, 0xf5, 0x1e, 0xe7, 0xbd, 0x3e, 0xb1, 0xbd, 0x90, 0xda, 0x1e, 0x63,
	0x5c, 0xaa, 0x44, 0x91, 0xf6, 0xae, 0x26, 0x99, 0x6c, 0x9f, 0x0f, 0x06, 0x9c, 0xd9, 0x94, 0x9d,
	0xf2, 0xd4, 0x6e, 0xbe, 0x06, 0xf0, 0x67, 0x87, 0xf4, 0x68, 0x24, 0x89, 0x78, 0x2c, 0x3d, 0x21,
	0x1d, 0x72, 0x16, 0x93, 0x48, 0xa2, 0x55, 0xb8, 0xc0, 0x05, 0xed, 0x51, 0x66, 0x80, 0x36, 0xe8,
	0x2c, 0x3a, 0xfa, 0x84, 0x36, 0xe1, 0x12, 0x26, 0x43, 0xea, 0x13, 0xb7, 0xef, 0x9d, 0x90, 0xbe,
	0x51, 0x52, 0xde, 0x5a, 0x6a, 0x3b, 0x4a, 0x4c, 0xe8, 0x0f, 0x88, 0x22, 0xe2, 0xc7, 0x82, 0xca,
	0x91, 0x2b, 0x03, 0x41, 0xa2, 0x80, 0xf7, 0xb1, 0x31, 0xdf, 0x06, 0x9d, 0x8a, 0xd3, 0xc8, 0x3c,
	0xc7, 0x99, 0x03, 0x21, 0x58, 0x8e, 0x63, 0x8a, 0x8d, 0xb2, 0xca, 0xa4, 0xbe, 0xcd, 0x10, 0xfe,
	0x72, 0x8d, 0x2a, 0x0a, 0x39, 0x8b, 0x08, 0xda, 0x85, 0x3f, 0xf9, 0x82, 0xa8, 0xd6, 0x5c, 0x1e,
	0xaa, 0x0e, 0x35, 0xe0, 0x72, 0x66, 0x7f, 0x94, 0x9a, 0xd1, 0x0a, 0xac, 0x88, 0xd0, 0xa5, 0x58,
	0x23, 0x96, 0x45, 0xf8, 0x3f, 0x46, 0x6b, 0xb0, 0x2a, 0x42, 0x97, 0x79, 0x03, 0xa2, 0x80, 0x16,
	0x9d, 0x05, 0x11, 0x3e, 0xf4, 0x06, 0xc4, 0x94, 0x79, 0xc5, 0x7f, 0x29, 0xa3, 0x51, 0x90, 0x0d,
	0x22, 0xc3, 0x03, 0x39, 0x1e, 0xb2, 0xe1, 0x8a, 0x2f, 0x88, 0xba, 0x03, 0xaf, 0xef, 0x0a, 0x0d,
	0xa7, 0x0b, 0xa1, 0xdc, 0xf5, 0x15, 0x3b, 0x9f, 0xe6, 0xfc, 0xe4, 0x34, 0xcd, 0x31, 0x80, 0xab,
	0xd7, 0xcb, 0xea, 0x5f, 0xea, 0xb0, 0xa4, 0xab, 0x2e, 0x39, 0x25, 0x8a, 0x91, 0x01, 0xab, 0x1e,
	0xc6, 0x82, 0x44, 0x91, 0xae, 0x93, 0x1d, 0xf3, 0x46, 0xe7, 0x67, 0x37, 0x5a, 0x9e, 0x6c, 0x14,
	0x1d, 0xc2, 0x25, 0x4c, 0xb1, 0x8b, 0xb9, 0x1f, 0x0f, 0x08, 0x93, 0x46, 0xa5, 0x0d, 0x3a, 0xb5,
	0xfd, 0x4d, 0x4b, 0x4b, 0x2d, 0x91, 0x97, 0x95, 0xc9, 0xcb, 0x3a, 0xa4, 0xf8, 0x50, 0x07, 0x3a,
	0x35, 0x9c, 0x1f, 0xd0, 0x1e, 0x6c, 0xc4, 0xbe, 0xc7, 0x5c, 0xc9, 0x9f, 0x12, 0xe6, 0x06, 0xc4,
	0xc3, 0x44, 0x18, 0x55, 0x05, 0xbb, 0x9c, 0x38, 0x8e, 0x13, 0xfb, 0x7f, 0xca, 0x6c, 0x1e, 0xc3,
	0xc6, 0x11, 0xef, 0x51, 0x76, 0x27, 0x7d, 0xed, 0xc0, 0x65, 0xcf, 0xf7, 0x79, 0xcc, 0xa4, 0x5b,
	0x6c, 0xb7, 0xae, 0xcd, 0x07, 0xa9, 0xd5, 0x7c, 0x03, 0x20, 0x9a, 0x4c, 0xab, 0xc7, 0x66, 0xc0,
	0x6a, 0x14, 0xfb, 0x7e, 0xf2, 0x5f, 0x92, 0xf8, 0x07, 0x27, 0x3b, 0xde, 0x39, 0x73, 0xa2, 0xdf,
	0x89, 0xdb, 0xcd, 0x54, 0x96, 0x0e, 0xb7, 0x91, 0x7b, 0xa6, 0x74, 0x56, 0x9e, 0x3d, 0xfe, 0x4a,
	0x41, 0x67, 0x17, 0x19, 0x76, 0x51, 0x65, 0x33, 0xe0, 0xc0, 0x4c, 0xb8, 0x7b, 0x93, 0xde, 0x67,
	0x00, 0x57, 0x0a, 0x20, 0xf7, 0x37, 0xc0, 0xef, 0x5c, 0x90, 0xfb, 0x6f, 0xcb, 0xb0, 0x7e, 0x50,
	0xd8, 0xb7, 0xe8, 0x1c, 0x40, 0x98, 0xab, 0x09, 0x6d, 0x59, 0x53, 0x9b, 0xd7, 0x9a, 0xd2, 0x70,
	0x73, 0xfb, 0x96, 0xa8, 0x74, 0xa2, 0xe6, 0xce, 0xf9, 0xfb, 0x4f, 0xaf, 0x4a, 0x9b, 0x7f, 0x81,
	0x3d, 0x73, 0xdd, 0x56, 0x7b, 0x78, 0xe8, 0xc5, 0x7d, 0xa9, 0x56, 0xbe, 0xdd, 0x4f, 0xe2, 0xed,
	0x48, 0x55, 0xbd, 0x00, 0xb0, 0x36, 0x71, 0x25, 0xe8, 0xc6, 0xfc, 0x05, 0xed, 0x34, 0x7f, 0xbb,
	0x2d, 0x4c, 0x73, 0x74, 0x14, 0x87, 0x99, 0x70, 0xfc, 0x7a, 0x03, 0xc7, 0x69, 0x5a, 0xf8, 0x39,
	0x80, 0x3f, 0x16, 0xf6, 0x2f, 0xda, 0x99, 0x51, 0x63, 0xd6, 0xbb, 0xd1, 0xec, 0xdc, 0x1e, 0xa8,
	0x71, 0xf6, 0x14, 0xce, 0x56, 0x82, 0xb3, 0x31, 0x85, 0x23, 0xf4, 0x2f, 0x7a, 0x32, 0x2f, 0x01,
	0xac, 0x17, 0xf7, 0x24, 0xfa, 0x56, 0xa1, 0xe2, 0x7c, 0x76, 0xef, 0x10, 0xa9, 0x99, 0x7e, 0x57,
	0x4c, 0xdb, 0x09, 0x53, 0xfb, 0x66, 0xa6, 0x74, 0x4a, 0xff, 0x3c, 0x78, 0x37, 0x6e, 0x81, 0xcb,
	0x71, 0x0b, 0x7c, 0x1c, 0xb7, 0xc0, 0x8b, 0xab, 0xd6, 0xdc, 0xe5, 0x55, 0x6b, 0xee, 0xc3, 0x55,
	0x6b, 0xee, 0x49, 0xb7, 0x47, 0x65, 0x10, 0x9f, 0x58, 0x3e, 0x1f, 0xd8, 0x69, 0x6d, 0x5b, 0x3d,
	0xdb, 0x72, 0x14, 0x92, 0xc8, 0xce, 0x5f, 0xfd, 0xbf, 0xf5, 0xe7, 0xb0, 0x7b, 0xb2, 0xa0, 0xde,
	0xe3, 0x3f, 0xbf, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x6d, 0x7c, 0xd2, 0x14, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthenticationClient is the client API for Authentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthenticationClient interface {
	// Login Start
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	LoginStart(ctx context.Context, in *LoginStartRequest, opts ...grpc.CallOption) (*LoginStartResponse, error)
	// Login Finish
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	LoginFinish(ctx context.Context, in *LoginFinishRequest, opts ...grpc.CallOption) (*LoginFinishResponse, error)
	// Register Start
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	RegisterStart(ctx context.Context, in *RegisterStartRequest, opts ...grpc.CallOption) (*RegisterStartResponse, error)
	// Register Finish
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	RegisterFinish(ctx context.Context, in *RegisterFinishRequest, opts ...grpc.CallOption) (*RegisterFinishResponse, error)
}

type authenticationClient struct {
	cc grpc1.ClientConn
}

func NewAuthenticationClient(cc grpc1.ClientConn) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) LoginStart(ctx context.Context, in *LoginStartRequest, opts ...grpc.CallOption) (*LoginStartResponse, error) {
	out := new(LoginStartResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.highway.v1.Authentication/LoginStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) LoginFinish(ctx context.Context, in *LoginFinishRequest, opts ...grpc.CallOption) (*LoginFinishResponse, error) {
	out := new(LoginFinishResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.highway.v1.Authentication/LoginFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) RegisterStart(ctx context.Context, in *RegisterStartRequest, opts ...grpc.CallOption) (*RegisterStartResponse, error) {
	out := new(RegisterStartResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.highway.v1.Authentication/RegisterStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) RegisterFinish(ctx context.Context, in *RegisterFinishRequest, opts ...grpc.CallOption) (*RegisterFinishResponse, error) {
	out := new(RegisterFinishResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.highway.v1.Authentication/RegisterFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServer is the server API for Authentication service.
type AuthenticationServer interface {
	// Login Start
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	LoginStart(context.Context, *LoginStartRequest) (*LoginStartResponse, error)
	// Login Finish
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	LoginFinish(context.Context, *LoginFinishRequest) (*LoginFinishResponse, error)
	// Register Start
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	RegisterStart(context.Context, *RegisterStartRequest) (*RegisterStartResponse, error)
	// Register Finish
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	RegisterFinish(context.Context, *RegisterFinishRequest) (*RegisterFinishResponse, error)
}

// UnimplementedAuthenticationServer can be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServer struct {
}

func (*UnimplementedAuthenticationServer) LoginStart(ctx context.Context, req *LoginStartRequest) (*LoginStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginStart not implemented")
}
func (*UnimplementedAuthenticationServer) LoginFinish(ctx context.Context, req *LoginFinishRequest) (*LoginFinishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginFinish not implemented")
}
func (*UnimplementedAuthenticationServer) RegisterStart(ctx context.Context, req *RegisterStartRequest) (*RegisterStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStart not implemented")
}
func (*UnimplementedAuthenticationServer) RegisterFinish(ctx context.Context, req *RegisterFinishRequest) (*RegisterFinishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFinish not implemented")
}

func RegisterAuthenticationServer(s grpc1.Server, srv AuthenticationServer) {
	s.RegisterService(&_Authentication_serviceDesc, srv)
}

func _Authentication_LoginStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).LoginStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.highway.v1.Authentication/LoginStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).LoginStart(ctx, req.(*LoginStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_LoginFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).LoginFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.highway.v1.Authentication/LoginFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).LoginFinish(ctx, req.(*LoginFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_RegisterStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).RegisterStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.highway.v1.Authentication/RegisterStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).RegisterStart(ctx, req.(*RegisterStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_RegisterFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).RegisterFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.highway.v1.Authentication/RegisterFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).RegisterFinish(ctx, req.(*RegisterFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authentication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonrhq.highway.v1.Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginStart",
			Handler:    _Authentication_LoginStart_Handler,
		},
		{
			MethodName: "LoginFinish",
			Handler:    _Authentication_LoginFinish_Handler,
		},
		{
			MethodName: "RegisterStart",
			Handler:    _Authentication_RegisterStart_Handler,
		},
		{
			MethodName: "RegisterFinish",
			Handler:    _Authentication_RegisterFinish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "highway/v1/authentication.proto",
}

func (m *RegisterStartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterStartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterStartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x22
	}
	if m.SecurityThreshold != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.SecurityThreshold))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DeviceLabel) > 0 {
		i -= len(m.DeviceLabel)
		copy(dAtA[i:], m.DeviceLabel)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceLabel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RpName) > 0 {
		i -= len(m.RpName)
		copy(dAtA[i:], m.RpName)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.RpName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RpId) > 0 {
		i -= len(m.RpId)
		copy(dAtA[i:], m.RpId)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.RpId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreationOptions) > 0 {
		i -= len(m.CreationOptions)
		copy(dAtA[i:], m.CreationOptions)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.CreationOptions)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterFinishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterFinishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterFinishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CredentialResponse) > 0 {
		i -= len(m.CredentialResponse)
		copy(dAtA[i:], m.CredentialResponse)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.CredentialResponse)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterFinishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterFinishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterFinishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UcanTokenHeader) > 0 {
		i -= len(m.UcanTokenHeader)
		copy(dAtA[i:], m.UcanTokenHeader)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.UcanTokenHeader)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DidDocument != nil {
		{
			size, err := m.DidDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RpName) > 0 {
		i -= len(m.RpName)
		copy(dAtA[i:], m.RpName)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.RpName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RpId) > 0 {
		i -= len(m.RpId)
		copy(dAtA[i:], m.RpId)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.RpId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginStartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginStartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginStartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RpName) > 0 {
		i -= len(m.RpName)
		copy(dAtA[i:], m.RpName)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.RpName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RpId) > 0 {
		i -= len(m.RpId)
		copy(dAtA[i:], m.RpId)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.RpId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CredentialOptions) > 0 {
		i -= len(m.CredentialOptions)
		copy(dAtA[i:], m.CredentialOptions)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.CredentialOptions)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoginFinishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginFinishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginFinishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CredentialResponse) > 0 {
		i -= len(m.CredentialResponse)
		copy(dAtA[i:], m.CredentialResponse)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.CredentialResponse)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginFinishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginFinishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginFinishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UcanTokenHeader) > 0 {
		i -= len(m.UcanTokenHeader)
		copy(dAtA[i:], m.UcanTokenHeader)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.UcanTokenHeader)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DidDocument != nil {
		{
			size, err := m.DidDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RpName) > 0 {
		i -= len(m.RpName)
		copy(dAtA[i:], m.RpName)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.RpName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RpId) > 0 {
		i -= len(m.RpId)
		copy(dAtA[i:], m.RpId)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.RpId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthentication(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthentication(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterStartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceLabel)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.SecurityThreshold != 0 {
		n += 1 + sovAuthentication(uint64(m.SecurityThreshold))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RegisterStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreationOptions)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.RpId)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.RpName)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RegisterFinishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.CredentialResponse)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RegisterFinishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.RpId)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.RpName)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.DidDocument != nil {
		l = m.DidDocument.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.UcanTokenHeader)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *LoginStartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *LoginStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.CredentialOptions)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.RpId)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.RpName)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *LoginFinishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.CredentialResponse)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *LoginFinishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.RpId)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.RpName)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.DidDocument != nil {
		l = m.DidDocument.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.UcanTokenHeader)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func sovAuthentication(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthentication(x uint64) (n int) {
	return sovAuthentication(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterStartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterStartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterStartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityThreshold", wireType)
			}
			m.SecurityThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecurityThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationOptions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterFinishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterFinishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterFinishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterFinishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterFinishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterFinishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocument == nil {
				m.DidDocument = &types.DidDocument{}
			}
			if err := m.DidDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UcanTokenHeader", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UcanTokenHeader = append(m.UcanTokenHeader[:0], dAtA[iNdEx:postIndex]...)
			if m.UcanTokenHeader == nil {
				m.UcanTokenHeader = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginStartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginStartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginStartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialOptions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginFinishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginFinishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginFinishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginFinishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginFinishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginFinishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocument == nil {
				m.DidDocument = &types.DidDocument{}
			}
			if err := m.DidDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UcanTokenHeader", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UcanTokenHeader = append(m.UcanTokenHeader[:0], dAtA[iNdEx:postIndex]...)
			if m.UcanTokenHeader == nil {
				m.UcanTokenHeader = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthentication(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthentication
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthentication
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthentication
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthentication        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthentication          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthentication = fmt.Errorf("proto: unexpected end of group")
)
