// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: highway/v1/authentication.proto

package highwayv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/sonrhq/core/types/highway/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthenticationName is the fully-qualified name of the Authentication service.
	AuthenticationName = "sonrhq.highway.v1.Authentication"
)

// AuthenticationClient is a client for the sonrhq.highway.v1.Authentication service.
type AuthenticationClient interface {
	// Login Start
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	LoginStart(context.Context, *connect_go.Request[v1.LoginStartRequest]) (*connect_go.Response[v1.LoginStartResponse], error)
	// Login Finish
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	LoginFinish(context.Context, *connect_go.Request[v1.LoginFinishRequest]) (*connect_go.Response[v1.LoginFinishResponse], error)
	// Register Start
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	RegisterStart(context.Context, *connect_go.Request[v1.RegisterStartRequest]) (*connect_go.Response[v1.RegisterStartResponse], error)
	// Register Finish
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	RegisterFinish(context.Context, *connect_go.Request[v1.RegisterFinishRequest]) (*connect_go.Response[v1.RegisterFinishResponse], error)
}

// NewAuthenticationClient constructs a client for the sonrhq.highway.v1.Authentication service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthenticationClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthenticationClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authenticationClient{
		loginStart: connect_go.NewClient[v1.LoginStartRequest, v1.LoginStartResponse](
			httpClient,
			baseURL+"/sonrhq.highway.v1.Authentication/LoginStart",
			opts...,
		),
		loginFinish: connect_go.NewClient[v1.LoginFinishRequest, v1.LoginFinishResponse](
			httpClient,
			baseURL+"/sonrhq.highway.v1.Authentication/LoginFinish",
			opts...,
		),
		registerStart: connect_go.NewClient[v1.RegisterStartRequest, v1.RegisterStartResponse](
			httpClient,
			baseURL+"/sonrhq.highway.v1.Authentication/RegisterStart",
			opts...,
		),
		registerFinish: connect_go.NewClient[v1.RegisterFinishRequest, v1.RegisterFinishResponse](
			httpClient,
			baseURL+"/sonrhq.highway.v1.Authentication/RegisterFinish",
			opts...,
		),
	}
}

// authenticationClient implements AuthenticationClient.
type authenticationClient struct {
	loginStart     *connect_go.Client[v1.LoginStartRequest, v1.LoginStartResponse]
	loginFinish    *connect_go.Client[v1.LoginFinishRequest, v1.LoginFinishResponse]
	registerStart  *connect_go.Client[v1.RegisterStartRequest, v1.RegisterStartResponse]
	registerFinish *connect_go.Client[v1.RegisterFinishRequest, v1.RegisterFinishResponse]
}

// LoginStart calls sonrhq.highway.v1.Authentication.LoginStart.
func (c *authenticationClient) LoginStart(ctx context.Context, req *connect_go.Request[v1.LoginStartRequest]) (*connect_go.Response[v1.LoginStartResponse], error) {
	return c.loginStart.CallUnary(ctx, req)
}

// LoginFinish calls sonrhq.highway.v1.Authentication.LoginFinish.
func (c *authenticationClient) LoginFinish(ctx context.Context, req *connect_go.Request[v1.LoginFinishRequest]) (*connect_go.Response[v1.LoginFinishResponse], error) {
	return c.loginFinish.CallUnary(ctx, req)
}

// RegisterStart calls sonrhq.highway.v1.Authentication.RegisterStart.
func (c *authenticationClient) RegisterStart(ctx context.Context, req *connect_go.Request[v1.RegisterStartRequest]) (*connect_go.Response[v1.RegisterStartResponse], error) {
	return c.registerStart.CallUnary(ctx, req)
}

// RegisterFinish calls sonrhq.highway.v1.Authentication.RegisterFinish.
func (c *authenticationClient) RegisterFinish(ctx context.Context, req *connect_go.Request[v1.RegisterFinishRequest]) (*connect_go.Response[v1.RegisterFinishResponse], error) {
	return c.registerFinish.CallUnary(ctx, req)
}

// AuthenticationHandler is an implementation of the sonrhq.highway.v1.Authentication service.
type AuthenticationHandler interface {
	// Login Start
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	LoginStart(context.Context, *connect_go.Request[v1.LoginStartRequest]) (*connect_go.Response[v1.LoginStartResponse], error)
	// Login Finish
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	LoginFinish(context.Context, *connect_go.Request[v1.LoginFinishRequest]) (*connect_go.Response[v1.LoginFinishResponse], error)
	// Register Start
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	RegisterStart(context.Context, *connect_go.Request[v1.RegisterStartRequest]) (*connect_go.Response[v1.RegisterStartResponse], error)
	// Register Finish
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	RegisterFinish(context.Context, *connect_go.Request[v1.RegisterFinishRequest]) (*connect_go.Response[v1.RegisterFinishResponse], error)
}

// NewAuthenticationHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthenticationHandler(svc AuthenticationHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/sonrhq.highway.v1.Authentication/LoginStart", connect_go.NewUnaryHandler(
		"/sonrhq.highway.v1.Authentication/LoginStart",
		svc.LoginStart,
		opts...,
	))
	mux.Handle("/sonrhq.highway.v1.Authentication/LoginFinish", connect_go.NewUnaryHandler(
		"/sonrhq.highway.v1.Authentication/LoginFinish",
		svc.LoginFinish,
		opts...,
	))
	mux.Handle("/sonrhq.highway.v1.Authentication/RegisterStart", connect_go.NewUnaryHandler(
		"/sonrhq.highway.v1.Authentication/RegisterStart",
		svc.RegisterStart,
		opts...,
	))
	mux.Handle("/sonrhq.highway.v1.Authentication/RegisterFinish", connect_go.NewUnaryHandler(
		"/sonrhq.highway.v1.Authentication/RegisterFinish",
		svc.RegisterFinish,
		opts...,
	))
	return "/sonrhq.highway.v1.Authentication/", mux
}

// UnimplementedAuthenticationHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthenticationHandler struct{}

func (UnimplementedAuthenticationHandler) LoginStart(context.Context, *connect_go.Request[v1.LoginStartRequest]) (*connect_go.Response[v1.LoginStartResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.highway.v1.Authentication.LoginStart is not implemented"))
}

func (UnimplementedAuthenticationHandler) LoginFinish(context.Context, *connect_go.Request[v1.LoginFinishRequest]) (*connect_go.Response[v1.LoginFinishResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.highway.v1.Authentication.LoginFinish is not implemented"))
}

func (UnimplementedAuthenticationHandler) RegisterStart(context.Context, *connect_go.Request[v1.RegisterStartRequest]) (*connect_go.Response[v1.RegisterStartResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.highway.v1.Authentication.RegisterStart is not implemented"))
}

func (UnimplementedAuthenticationHandler) RegisterFinish(context.Context, *connect_go.Request[v1.RegisterFinishRequest]) (*connect_go.Response[v1.RegisterFinishResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.highway.v1.Authentication.RegisterFinish is not implemented"))
}
