// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sonr/vault/v1/storage.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/sonrhq/core/types/vault/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// VaultStorageName is the fully-qualified name of the VaultStorage service.
	VaultStorageName = "sonrhq.sonr.vault.v1.VaultStorage"
)

// VaultStorageClient is a client for the sonrhq.sonr.vault.v1.VaultStorage service.
type VaultStorageClient interface {
	// Refresh Shares
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	RefreshShares(context.Context, *connect_go.Request[v1.RefreshSharesRequest]) (*connect_go.Response[v1.RefreshSharesResponse], error)
}

// NewVaultStorageClient constructs a client for the sonrhq.sonr.vault.v1.VaultStorage service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVaultStorageClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VaultStorageClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vaultStorageClient{
		refreshShares: connect_go.NewClient[v1.RefreshSharesRequest, v1.RefreshSharesResponse](
			httpClient,
			baseURL+"/sonrhq.sonr.vault.v1.VaultStorage/RefreshShares",
			opts...,
		),
	}
}

// vaultStorageClient implements VaultStorageClient.
type vaultStorageClient struct {
	refreshShares *connect_go.Client[v1.RefreshSharesRequest, v1.RefreshSharesResponse]
}

// RefreshShares calls sonrhq.sonr.vault.v1.VaultStorage.RefreshShares.
func (c *vaultStorageClient) RefreshShares(ctx context.Context, req *connect_go.Request[v1.RefreshSharesRequest]) (*connect_go.Response[v1.RefreshSharesResponse], error) {
	return c.refreshShares.CallUnary(ctx, req)
}

// VaultStorageHandler is an implementation of the sonrhq.sonr.vault.v1.VaultStorage service.
type VaultStorageHandler interface {
	// Refresh Shares
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// #### {{.RequestType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .RequestType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	//
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	RefreshShares(context.Context, *connect_go.Request[v1.RefreshSharesRequest]) (*connect_go.Response[v1.RefreshSharesResponse], error)
}

// NewVaultStorageHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVaultStorageHandler(svc VaultStorageHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/sonrhq.sonr.vault.v1.VaultStorage/RefreshShares", connect_go.NewUnaryHandler(
		"/sonrhq.sonr.vault.v1.VaultStorage/RefreshShares",
		svc.RefreshShares,
		opts...,
	))
	return "/sonrhq.sonr.vault.v1.VaultStorage/", mux
}

// UnimplementedVaultStorageHandler returns CodeUnimplemented from all methods.
type UnimplementedVaultStorageHandler struct{}

func (UnimplementedVaultStorageHandler) RefreshShares(context.Context, *connect_go.Request[v1.RefreshSharesRequest]) (*connect_go.Response[v1.RefreshSharesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.sonr.vault.v1.VaultStorage.RefreshShares is not implemented"))
}
