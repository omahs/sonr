// @generated by protoc-gen-es v1.1.0
// @generated from file core/identity/did.proto (package sonrhq.core.identity, syntax proto3)
/* eslint-disable */
// @ts-nocheck

// Sonr API
//
// Sonr is a peer-to-peer identity and asset management system that leverages DID documents, Webauthn, and IPFS â€” providing users with a secure, user-friendly way to manage their digital identity and assets.

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * DIDMethod is the DID method for each supported resolver.
 *
 * @generated from enum sonrhq.core.identity.DIDMethod
 */
export declare enum DIDMethod {
  /**
   * DID method for the Sonr network
   *
   * @generated from enum value: DIDMethod_BLOCKCHAIN = 0;
   */
  DIDMethod_BLOCKCHAIN = 0,

  /**
   * DID method for the Ethereum network
   *
   * @generated from enum value: DIDMethod_WEB = 1;
   */
  DIDMethod_WEB = 1,

  /**
   * DID method for the Cosmos network
   *
   * @generated from enum value: DIDMethod_KEY = 2;
   */
  DIDMethod_KEY = 2,

  /**
   * DID method for the Filecoin network
   *
   * @generated from enum value: DIDMethod_IPFS = 3;
   */
  DIDMethod_IPFS = 3,

  /**
   * DID method for the Handshake network
   *
   * @generated from enum value: DIDMethod_PEER = 4;
   */
  DIDMethod_PEER = 4,
}

/**
 * @generated from message sonrhq.core.identity.DidDocument
 */
export declare class DidDocument extends Message<DidDocument> {
  /**
   * @generated from field: repeated string context = 1;
   */
  context: string[];

  /**
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * optional
   *
   * @generated from field: repeated string controller = 3;
   */
  controller: string[];

  /**
   * optional
   *
   * @generated from field: repeated sonrhq.core.identity.VerificationMethod verification_method = 4;
   */
  verificationMethod: VerificationMethod[];

  /**
   * optional
   *
   * @generated from field: repeated sonrhq.core.identity.VerificationRelationship authentication = 5;
   */
  authentication: VerificationRelationship[];

  /**
   * optional
   *
   * @generated from field: repeated sonrhq.core.identity.VerificationRelationship assertion_method = 6;
   */
  assertionMethod: VerificationRelationship[];

  /**
   * optional
   *
   * @generated from field: repeated sonrhq.core.identity.VerificationRelationship capability_invocation = 7;
   */
  capabilityInvocation: VerificationRelationship[];

  /**
   * optional
   *
   * @generated from field: repeated sonrhq.core.identity.VerificationRelationship capability_delegation = 8;
   */
  capabilityDelegation: VerificationRelationship[];

  /**
   * optional
   *
   * @generated from field: repeated sonrhq.core.identity.VerificationRelationship key_agreement = 9;
   */
  keyAgreement: VerificationRelationship[];

  /**
   * optional
   *
   * @generated from field: repeated sonrhq.core.identity.Service service = 10;
   */
  service: Service[];

  /**
   * optional
   *
   * @generated from field: repeated string also_known_as = 11;
   */
  alsoKnownAs: string[];

  /**
   * optional
   *
   * @generated from field: repeated sonrhq.core.identity.KeyValuePair metadata = 12;
   */
  metadata: KeyValuePair[];

  constructor(data?: PartialMessage<DidDocument>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sonrhq.core.identity.DidDocument";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DidDocument;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DidDocument;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DidDocument;

  static equals(a: DidDocument | PlainMessage<DidDocument> | undefined, b: DidDocument | PlainMessage<DidDocument> | undefined): boolean;
}

/**
 * @generated from message sonrhq.core.identity.VerificationMethod
 */
export declare class VerificationMethod extends Message<VerificationMethod> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * @generated from field: string controller = 3;
   */
  controller: string;

  /**
   * optional
   *
   * @generated from field: repeated sonrhq.core.identity.KeyValuePair public_key_jwk = 4;
   */
  publicKeyJwk: KeyValuePair[];

  /**
   * optional
   *
   * @generated from field: string public_key_multibase = 5;
   */
  publicKeyMultibase: string;

  /**
   * optional
   *
   * @generated from field: string blockchain_account_id = 6;
   */
  blockchainAccountId: string;

  /**
   * @generated from field: repeated sonrhq.core.identity.KeyValuePair metadata = 7;
   */
  metadata: KeyValuePair[];

  constructor(data?: PartialMessage<VerificationMethod>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sonrhq.core.identity.VerificationMethod";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerificationMethod;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerificationMethod;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerificationMethod;

  static equals(a: VerificationMethod | PlainMessage<VerificationMethod> | undefined, b: VerificationMethod | PlainMessage<VerificationMethod> | undefined): boolean;
}

/**
 * @generated from message sonrhq.core.identity.VerificationRelationship
 */
export declare class VerificationRelationship extends Message<VerificationRelationship> {
  /**
   * @generated from field: sonrhq.core.identity.VerificationMethod verification_method = 1;
   */
  verificationMethod?: VerificationMethod;

  /**
   * @generated from field: string reference = 2;
   */
  reference: string;

  constructor(data?: PartialMessage<VerificationRelationship>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sonrhq.core.identity.VerificationRelationship";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerificationRelationship;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerificationRelationship;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerificationRelationship;

  static equals(a: VerificationRelationship | PlainMessage<VerificationRelationship> | undefined, b: VerificationRelationship | PlainMessage<VerificationRelationship> | undefined): boolean;
}

/**
 * @generated from message sonrhq.core.identity.Service
 */
export declare class Service extends Message<Service> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string controller = 2;
   */
  controller: string;

  /**
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * @generated from field: string origin = 4;
   */
  origin: string;

  /**
   * @generated from field: string name = 5;
   */
  name: string;

  /**
   * optional
   *
   * @generated from field: repeated sonrhq.core.identity.KeyValuePair service_endpoints = 6;
   */
  serviceEndpoints: KeyValuePair[];

  /**
   * optional
   *
   * @generated from field: repeated sonrhq.core.identity.KeyValuePair metadata = 7;
   */
  metadata: KeyValuePair[];

  constructor(data?: PartialMessage<Service>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sonrhq.core.identity.Service";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Service;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Service;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Service;

  static equals(a: Service | PlainMessage<Service> | undefined, b: Service | PlainMessage<Service> | undefined): boolean;
}

/**
 * @generated from message sonrhq.core.identity.KeyValuePair
 */
export declare class KeyValuePair extends Message<KeyValuePair> {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string value = 2;
   */
  value: string;

  constructor(data?: PartialMessage<KeyValuePair>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sonrhq.core.identity.KeyValuePair";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyValuePair;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyValuePair;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyValuePair;

  static equals(a: KeyValuePair | PlainMessage<KeyValuePair> | undefined, b: KeyValuePair | PlainMessage<KeyValuePair> | undefined): boolean;
}

