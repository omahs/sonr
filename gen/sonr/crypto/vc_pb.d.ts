// @generated by protoc-gen-es v1.1.0
// @generated from file sonr/crypto/vc.proto (package sonrhq.sonr.crypto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ProofType } from "./ssi_pb.js";

/**
 * Proof represents a credential/presentation proof as defined by the Linked Data Proofs 1.0 specification (https://w3c-ccg.github.io/ld-proofs/).
 *
 * @generated from message sonrhq.sonr.crypto.Proof
 */
export declare class Proof extends Message<Proof> {
  /**
   * Type defines the specific proof type used. For example, an Ed25519Signature2018 type indicates that the proof includes a digital signature produced by an ed25519 cryptographic key.
   *
   * @generated from field: sonrhq.sonr.crypto.ProofType type = 1;
   */
  type: ProofType;

  /**
   * ProofPurpose defines the intent for the proof, the reason why an entity created it. Acts as a safeguard to prevent the proof from being misused for a purpose other than the one it was intended for.
   *
   * @generated from field: string proof_purpose = 2;
   */
  proofPurpose: string;

  /**
   * VerificationMethod points to the ID that can be used to verify the proof, eg: a public key.
   *
   * @generated from field: string verification_method = 3;
   */
  verificationMethod: string;

  /**
   * Created notes when the proof was created using a iso8601 string
   *
   * @generated from field: string created = 4;
   */
  created: string;

  /**
   * Domain specifies the restricted domain of the proof
   *
   * @generated from field: string domain = 5;
   */
  domain: string;

  constructor(data?: PartialMessage<Proof>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sonrhq.sonr.crypto.Proof";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Proof;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Proof;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Proof;

  static equals(a: Proof | PlainMessage<Proof> | undefined, b: Proof | PlainMessage<Proof> | undefined): boolean;
}

/**
 * JSONWebSignature2020Proof is a VC proof with a signature according to JsonWebSignature2020
 *
 * @generated from message sonrhq.sonr.crypto.JSONWebSignature2020Proof
 */
export declare class JSONWebSignature2020Proof extends Message<JSONWebSignature2020Proof> {
  /**
   * @generated from field: sonrhq.sonr.crypto.Proof proof = 1;
   */
  proof?: Proof;

  /**
   * @generated from field: string jws = 2;
   */
  jws: string;

  constructor(data?: PartialMessage<JSONWebSignature2020Proof>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sonrhq.sonr.crypto.JSONWebSignature2020Proof";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JSONWebSignature2020Proof;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JSONWebSignature2020Proof;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JSONWebSignature2020Proof;

  static equals(a: JSONWebSignature2020Proof | PlainMessage<JSONWebSignature2020Proof> | undefined, b: JSONWebSignature2020Proof | PlainMessage<JSONWebSignature2020Proof> | undefined): boolean;
}

/**
 * VerifiableCredential represents a credential as defined by the Verifiable Credentials Data Model 1.0 specification (https://www.w3.org/TR/vc-data-model/).
 *
 * @generated from message sonrhq.sonr.crypto.VerifiableCredential
 */
export declare class VerifiableCredential extends Message<VerifiableCredential> {
  /**
   * ID is the unique identifier for the credential.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Context is a list of URIs that define the context of the credential.
   *
   * @generated from field: repeated string context = 2;
   */
  context: string[];

  /**
   * Type is a list of URIs that define the type of the credential.
   *
   * @generated from field: repeated string type = 3;
   */
  type: string[];

  /**
   * Issuer is the DID of the issuer of the credential.
   *
   * @generated from field: string issuer = 4;
   */
  issuer: string;

  /**
   * IssuanceDate is the date the credential was issued.
   *
   * @generated from field: string issuance_date = 5;
   */
  issuanceDate: string;

  /**
   * ExpirationDate is the date the credential expires.
   *
   * @generated from field: string expiration_date = 6;
   */
  expirationDate: string;

  /**
   * CredentialSubject is the subject of the credential.
   *
   * @generated from field: map<string, string> credential_subject = 7;
   */
  credentialSubject: { [key: string]: string };

  /**
   * Proof is the proof of the credential.
   *
   * @generated from field: map<string, string> proof = 8;
   */
  proof: { [key: string]: string };

  constructor(data?: PartialMessage<VerifiableCredential>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sonrhq.sonr.crypto.VerifiableCredential";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifiableCredential;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifiableCredential;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifiableCredential;

  static equals(a: VerifiableCredential | PlainMessage<VerifiableCredential> | undefined, b: VerifiableCredential | PlainMessage<VerifiableCredential> | undefined): boolean;
}

