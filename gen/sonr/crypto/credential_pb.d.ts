// @generated by protoc-gen-es v1.1.0
// @generated from file sonr/crypto/credential.proto (package sonrhq.sonr.crypto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * WebauthnCredential contains all needed information about a WebAuthn credential for storage
 *
 * @generated from message sonrhq.sonr.crypto.WebauthnCredential
 */
export declare class WebauthnCredential extends Message<WebauthnCredential> {
  /**
   * A probabilistically-unique byte sequence identifying a public key credential source and its authentication assertions.
   *
   * @generated from field: bytes id = 1;
   */
  id: Uint8Array;

  /**
   * The public key portion of a Relying Party-specific credential key pair, generated by an authenticator and returned to
   * a Relying Party at registration time (see also public key credential). The private key portion of the credential key
   * pair is known as the credential private key. Note that in the case of self attestation, the credential key pair is also
   * used as the attestation key pair, see self attestation for details.
   *
   * @generated from field: bytes public_key = 2;
   */
  publicKey: Uint8Array;

  /**
   * The attestation format used (if any) by the authenticator when creating the credential.
   *
   * @generated from field: string attestation_type = 3;
   */
  attestationType: string;

  /**
   * The transports used by the authenticator when creating the credential.
   *
   * @generated from field: repeated string transport = 4;
   */
  transport: string[];

  /**
   * The Authenticator information for a given certificate
   *
   * @generated from field: sonrhq.sonr.crypto.WebauthnAuthenticator authenticator = 5;
   */
  authenticator?: WebauthnAuthenticator;

  constructor(data?: PartialMessage<WebauthnCredential>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sonrhq.sonr.crypto.WebauthnCredential";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebauthnCredential;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebauthnCredential;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebauthnCredential;

  static equals(a: WebauthnCredential | PlainMessage<WebauthnCredential> | undefined, b: WebauthnCredential | PlainMessage<WebauthnCredential> | undefined): boolean;
}

/**
 * WebauthnAuthenticator contains certificate information about a WebAuthn authenticator
 *
 * @generated from message sonrhq.sonr.crypto.WebauthnAuthenticator
 */
export declare class WebauthnAuthenticator extends Message<WebauthnAuthenticator> {
  /**
   * The AAGUID of the authenticator. An AAGUID is defined as an array containing the globally unique
   * identifier of the authenticator model being sought.
   *
   * @generated from field: bytes aaguid = 1;
   */
  aaguid: Uint8Array;

  /**
   * SignCount -Upon a new login operation, the Relying Party compares the stored signature counter value
   * with the new signCount value returned in the assertionâ€™s authenticator data. If this new
   * signCount value is less than or equal to the stored value, a cloned authenticator may
   * exist, or the authenticator may be malfunctioning.
   *
   * @generated from field: uint32 sign_count = 2;
   */
  signCount: number;

  /**
   * CloneWarning - This is a signal that the authenticator may be cloned, i.e. at least two copies of the
   * credential private key may exist and are being used in parallel. Relying Parties should incorporate
   * this information into their risk scoring. Whether the Relying Party updates the stored signature
   * counter value in this case, or not, or fails the authentication ceremony or not, is Relying Party-specific.
   *
   * @generated from field: bool clone_warning = 3;
   */
  cloneWarning: boolean;

  constructor(data?: PartialMessage<WebauthnAuthenticator>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sonrhq.sonr.crypto.WebauthnAuthenticator";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebauthnAuthenticator;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebauthnAuthenticator;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebauthnAuthenticator;

  static equals(a: WebauthnAuthenticator | PlainMessage<WebauthnAuthenticator> | undefined, b: WebauthnAuthenticator | PlainMessage<WebauthnAuthenticator> | undefined): boolean;
}

