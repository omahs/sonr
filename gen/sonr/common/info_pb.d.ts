// @generated by protoc-gen-es v1.1.0
// @generated from file sonr/common/info.proto (package sonrhq.sonr.common, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Account is used for storing all credentials and their locations to be encrypted.
 *
 * @generated from message sonrhq.sonr.common.AccountInfo
 */
export declare class AccountInfo extends Message<AccountInfo> {
  /**
   * Address is the associated Sonr address.
   *
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * Credentials is a list of all credentials associated with the account.
   *
   * @generated from field: string network = 2;
   */
  network: string;

  /**
   * Label is the label of the account.
   *
   * @generated from field: string label = 3;
   */
  label: string;

  /**
   * Index is the index of the account.
   *
   * @generated from field: uint32 index = 4;
   */
  index: number;

  /**
   * Balance is the balance of the account.
   *
   * @generated from field: int32 balance = 5;
   */
  balance: number;

  constructor(data?: PartialMessage<AccountInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sonrhq.sonr.common.AccountInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountInfo;

  static equals(a: AccountInfo | PlainMessage<AccountInfo> | undefined, b: AccountInfo | PlainMessage<AccountInfo> | undefined): boolean;
}

/**
 * Basic Info Sent to Peers to Establish Connections
 *
 * @generated from message sonrhq.sonr.common.PeerInfo
 */
export declare class PeerInfo extends Message<PeerInfo> {
  /**
   * User Sonr Account Decentralized ID
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * User Defined Label for Peer, also known as PartyID
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Peer ID
   *
   * @generated from field: string peer_id = 3;
   */
  peerId: string;

  /**
   * Peer Multiaddress
   *
   * @generated from field: string multiaddr = 4;
   */
  multiaddr: string;

  constructor(data?: PartialMessage<PeerInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sonrhq.sonr.common.PeerInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerInfo;

  static equals(a: PeerInfo | PlainMessage<PeerInfo> | undefined, b: PeerInfo | PlainMessage<PeerInfo> | undefined): boolean;
}

/**
 * @generated from message sonrhq.sonr.common.WalletInfo
 */
export declare class WalletInfo extends Message<WalletInfo> {
  /**
   * Controller is the associated Sonr address.
   *
   * @generated from field: string controller = 1;
   */
  controller: string;

  /**
   * DiscoverPaths is a list of all known hardened coin type paths.
   *
   * @generated from field: repeated int32 discovered_paths = 2;
   */
  discoveredPaths: number[];

  /**
   * Algorithm is the algorithm of the wallet. CMP is the default.
   *
   * @generated from field: string algorithm = 3;
   */
  algorithm: string;

  /**
   * CreatedAt is the time the wallet was created.
   *
   * @generated from field: int64 created_at = 4;
   */
  createdAt: bigint;

  /**
   * LastUpdated is the last time the wallet was updated.
   *
   * @generated from field: int64 last_updated = 5;
   */
  lastUpdated: bigint;

  constructor(data?: PartialMessage<WalletInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "sonrhq.sonr.common.WalletInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WalletInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WalletInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WalletInfo;

  static equals(a: WalletInfo | PlainMessage<WalletInfo> | undefined, b: WalletInfo | PlainMessage<WalletInfo> | undefined): boolean;
}

