swagger: "2.0"
info:
  title: Sonr API
  description: Sonr is a peer-to-peer identity and asset management system that leverages DID documents, Webauthn, and IPFS â€” providing users with a secure, user-friendly way to manage their digital identity and assets.
  version: version not set
tags:
  - name: Query
  - name: Msg
  - name: VaultAccounts
  - name: VaultAuthentication
  - name: VaultStorage
consumes:
  - application/json
produces:
  - application/json
paths:
  /sonr/core/identity/did:
    get:
      summary: |-
        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: Query_DidAll
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryAllDidResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
            It is less efficient than using key. Only one of offset or key should
            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: |-
            limit is the total number of results to be returned in the result page.
            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.countTotal
          description: |-
            count_total is set to true  to indicate that the result set should include
            a count of the total number of items available for pagination in UIs.
            count_total is only respected when offset is used. It is ignored when key
            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: |-
            reverse is set to true if results are to be returned in the descending order.

            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /sonr/core/identity/did/{did}:
    get:
      summary: |-
        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: Query_Did
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryGetDidResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: did
          description: did is the unique identifier of the DIDDocument - it appears like (did:sonr:...)
          in: path
          required: true
          type: string
      tags:
        - Query
  /sonr/core/identity/did/aka/{akaId}:
    get:
      summary: |-
        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: Query_DidByAlsoKnownAs
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryDidByAlsoKnownAsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: akaId
          description: aka_id is the unique identifier of the DIDDocument - it appears like ("example.snr")
          in: path
          required: true
          type: string
      tags:
        - Query
  /sonr/core/identity/did/key/{keyId}:
    get:
      summary: |-
        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: Query_DidByKeyID
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryDidByKeyIDResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: keyId
          description: key_id is the unique identifier of the DIDDocument - it appears like (did:sonr:...#key-1)
          in: path
          required: true
          type: string
      tags:
        - Query
  /sonr/core/identity/params:
    get:
      summary: |-
        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: Query_Params
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryParamsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - Query
  /sonr/core/identity/service:
    get:
      summary: |-
        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: Query_ServiceAll
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryAllServiceResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
            It is less efficient than using key. Only one of offset or key should
            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: |-
            limit is the total number of results to be returned in the result page.
            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.countTotal
          description: |-
            count_total is set to true  to indicate that the result set should include
            a count of the total number of items available for pagination in UIs.
            count_total is only respected when offset is used. It is ignored when key
            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: |-
            reverse is set to true if results are to be returned in the descending order.

            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /sonr/core/identity/service/{origin}:
    get:
      summary: |-
        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: Query_Service
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryGetServiceResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: origin
          description: origin is the hostname of the calling service - it appears like ("test.com")
          in: path
          required: true
          type: string
      tags:
        - Query
  /sonr/vault/accounts/{sonrId}:
    get:
      summary: List the accounts
      description: |-
        {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
        It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

        #### {{.RequestType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .RequestType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: VaultAccounts_ListAccounts
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListAccountsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: sonrId
          in: path
          required: true
          type: string
      tags:
        - VaultAccounts
  /sonr/vault/accounts/{sonrId}/{coinType}:
    get:
      summary: Get Account
      description: |-
        {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
        It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

        #### {{.RequestType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .RequestType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: VaultAccounts_GetAccount
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetAccountResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: sonrId
          in: path
          required: true
          type: string
        - name: coinType
          in: path
          required: true
          type: string
      tags:
        - VaultAccounts
  /sonr/vault/accounts/{sonrId}/create:
    post:
      summary: Create a new account
      description: |-
        {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
        It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

        #### {{.RequestType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .RequestType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: VaultAccounts_CreateAccount
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CreateAccountResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: sonrId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              coinType:
                type: string
            description: CreateAccountRequest is the request to create an account.
      tags:
        - VaultAccounts
  /sonr/vault/accounts/{targetDid}/delete:
    post:
      summary: Delete Account
      description: |-
        {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
        It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

        #### {{.RequestType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .RequestType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: VaultAccounts_DeleteAccount
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1DeleteAccountResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: targetDid
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              sonrId:
                type: string
            description: DeleteAccountRequest is the request to delete an account.
      tags:
        - VaultAccounts
  /sonr/vault/auth/login/finish:
    post:
      summary: Login Finish
      description: |-
        {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
        It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

        #### {{.RequestType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .RequestType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: VaultAuthentication_LoginFinish
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1LoginFinishResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: LoginFinishRequest is the request to login to an account.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1LoginFinishRequest'
      tags:
        - VaultAuthentication
  /sonr/vault/auth/login/start:
    post:
      summary: Login Start
      description: |-
        {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
        It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

        #### {{.RequestType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .RequestType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: VaultAuthentication_LoginStart
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1LoginStartResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: LoginStartRequest is the request to login to an account.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1LoginStartRequest'
      tags:
        - VaultAuthentication
  /sonr/vault/auth/register/finish:
    post:
      summary: Register Finish
      description: |-
        {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
        It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

        #### {{.RequestType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .RequestType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: VaultAuthentication_RegisterFinish
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1RegisterFinishResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: RegisterFinishRequest is the request to CreateAccount a new key from the private key.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1RegisterFinishRequest'
      tags:
        - VaultAuthentication
  /sonr/vault/auth/register/start:
    post:
      summary: Register Start
      description: |-
        {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
        It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

        #### {{.RequestType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .RequestType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: VaultAuthentication_RegisterStart
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1RegisterStartResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: RegisterStartRequest is the request to register a new account.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1RegisterStartRequest'
      tags:
        - VaultAuthentication
  /sonr/vault/storage/refresh:
    post:
      summary: Refresh Shares
      description: |-
        {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
        It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

        #### {{.RequestType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .RequestType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


        #### {{.ResponseType.Name}}
        | Name | Type | Description |
        | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
        | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
      operationId: VaultStorage_RefreshShares
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1RefreshSharesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: RefreshSharesRequest is the request to refresh the keypair.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1RefreshSharesRequest'
      tags:
        - VaultStorage
  /sonrhq/core/identity/did/pubkey/{pubkey}/{create}:
    get:
      summary: Queries a list of DidByPubKey items.
      operationId: Query_DidByPubKey
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/identityQueryDidByPubKeyResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pubkey
          description: Public key is a base64 encoded string of the public key
          in: path
          required: true
          type: string
        - name: create
          description: Create account if it doesn't exist
          in: path
          required: true
          type: boolean
      tags:
        - Query
definitions:
  commonAccountInfo:
    type: object
    properties:
      address:
        type: string
        description: Address is the associated Sonr address.
      network:
        type: string
        description: Credentials is a list of all credentials associated with the account.
      label:
        type: string
        description: Label is the label of the account.
      index:
        type: integer
        format: int64
        description: Index is the index of the account.
      balance:
        type: integer
        format: int32
        description: Balance is the balance of the account.
    description: Account is used for storing all credentials and their locations to be encrypted.
  identityDidDocument:
    type: object
    properties:
      context:
        type: array
        items:
          type: string
      id:
        type: string
      controller:
        type: array
        items:
          type: string
        title: optional
      verificationMethod:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityVerificationMethod'
        title: optional
      authentication:
        type: array
        items:
          type: string
        title: optional
      assertionMethod:
        type: array
        items:
          type: string
        title: optional
      capabilityInvocation:
        type: array
        items:
          type: string
        title: optional
      capabilityDelegation:
        type: array
        items:
          type: string
        title: optional
      keyAgreement:
        type: array
        items:
          type: string
        title: optional
      service:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityService'
        title: optional
      alsoKnownAs:
        type: array
        items:
          type: string
        title: optional
      metadata:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityKeyValuePair'
        title: optional
  identityKeyValuePair:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
  identityMsgCreateDidDocumentResponse:
    type: object
  identityMsgDeactivateServiceResponse:
    type: object
  identityMsgDeleteDidDocumentResponse:
    type: object
  identityMsgRegisterServiceResponse:
    type: object
  identityMsgUpdateDidDocumentResponse:
    type: object
    properties:
      creator:
        type: string
  identityMsgUpdateServiceResponse:
    type: object
  identityParams:
    type: object
    properties:
      didBaseContext:
        type: string
      didMethodContext:
        type: string
      didMethodName:
        type: string
      didMethodVersion:
        type: string
      didNetwork:
        type: string
      ipfsGateway:
        type: string
      ipfsApi:
        type: string
      webauthnAttestionPreference:
        type: string
      webauthnAuthenticatorAttachment:
        type: string
      webauthnTimeout:
        type: integer
        format: int32
    description: Params defines the parameters for the module.
  identityQueryAllDidResponse:
    type: object
    properties:
      didDocument:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityDidDocument'
      pagination:
        $ref: '#/definitions/v1beta1PageResponse'
  identityQueryAllServiceResponse:
    type: object
    properties:
      services:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityService'
      pagination:
        $ref: '#/definitions/v1beta1PageResponse'
  identityQueryDidByAlsoKnownAsResponse:
    type: object
    properties:
      didDocument:
        $ref: '#/definitions/identityResolvedDidDocument'
        title: A DIDDocument is a JSON-LD object that contains a set of public keys
  identityQueryDidByKeyIDResponse:
    type: object
    properties:
      didDocument:
        $ref: '#/definitions/identityResolvedDidDocument'
        title: A DIDDocument is a JSON-LD object that contains a set of public keys
  identityQueryDidByPubKeyResponse:
    type: object
  identityQueryGetDidResponse:
    type: object
    properties:
      didDocument:
        $ref: '#/definitions/identityResolvedDidDocument'
        title: A DIDDocument is a JSON-LD object that contains a set of public keys
  identityQueryGetServiceResponse:
    type: object
    properties:
      service:
        $ref: '#/definitions/identityService'
        title: A Service is a JSON-LD object that contains relaying information to authenticate a client
      challenge:
        type: string
        title: Challenge is a random string that is used to authenticate the client
  identityQueryParamsResponse:
    type: object
    properties:
      params:
        $ref: '#/definitions/identityParams'
        description: params holds all the parameters of this module.
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  identityResolvedDidDocument:
    type: object
    properties:
      context:
        type: array
        items:
          type: string
      id:
        type: string
      controller:
        type: array
        items:
          type: string
        title: optional
      verificationMethod:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityVerificationMethod'
        title: optional
      authentication:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityVerificationRelationship'
        title: optional
      assertionMethod:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityVerificationRelationship'
        title: optional
      capabilityInvocation:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityVerificationRelationship'
        title: optional
      capabilityDelegation:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityVerificationRelationship'
        title: optional
      keyAgreement:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityVerificationRelationship'
        title: optional
      service:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityService'
        title: optional
      alsoKnownAs:
        type: array
        items:
          type: string
        title: optional
      metadata:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityKeyValuePair'
        title: optional
    description: ResolvedDidDocument is a JSON-LD object that contains a set of public keys and verification methods that are used to authenticate the DID subject.
  identityService:
    type: object
    properties:
      id:
        type: string
      controller:
        type: string
      type:
        type: string
      origin:
        type: string
      name:
        type: string
      serviceEndpoints:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityKeyValuePair'
        title: optional
      metadata:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityKeyValuePair'
        title: optional
  identityVerificationMethod:
    type: object
    properties:
      id:
        type: string
      type:
        type: string
      controller:
        type: string
      publicKeyJwk:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityKeyValuePair'
        title: optional
      publicKeyMultibase:
        type: string
        title: optional
      blockchainAccountId:
        type: string
        title: optional
      metadata:
        type: array
        items:
          type: object
          $ref: '#/definitions/identityKeyValuePair'
  identityVerificationRelationship:
    type: object
    properties:
      verificationMethod:
        $ref: '#/definitions/identityVerificationMethod'
      reference:
        type: string
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  v1CreateAccountResponse:
    type: object
    properties:
      success:
        type: boolean
      coinType:
        type: string
      didDocument:
        $ref: '#/definitions/identityDidDocument'
      accounts:
        type: array
        items:
          type: object
          $ref: '#/definitions/commonAccountInfo'
    description: CreateAccountResponse is the response to a CreateAccount request.
  v1DeleteAccountResponse:
    type: object
    properties:
      success:
        type: boolean
      didDocument:
        $ref: '#/definitions/identityDidDocument'
      accounts:
        type: array
        items:
          type: object
          $ref: '#/definitions/commonAccountInfo'
    description: DeleteAccountResponse is the response to a DeleteAccount request.
  v1GetAccountResponse:
    type: object
    properties:
      success:
        type: boolean
      coinType:
        type: string
      accounts:
        type: array
        items:
          type: object
          $ref: '#/definitions/commonAccountInfo'
    description: GetAccountResponse is the response to a GetAccount request.
  v1ListAccountsResponse:
    type: object
    properties:
      success:
        type: boolean
      accounts:
        type: array
        items:
          type: object
          $ref: '#/definitions/commonAccountInfo'
    description: ListAccountsResponse is the response to a ListAccounts request.
  v1LoginFinishRequest:
    type: object
    properties:
      accountAddress:
        type: string
        description: Address of the account to login to.
      credentialResponse:
        type: string
        description: The signed credential response from the user.
      origin:
        type: string
        description: The origin of the request. This is used to query the Blockchain for the Service DID.
    description: LoginFinishRequest is the request to login to an account.
  v1LoginFinishResponse:
    type: object
    properties:
      success:
        type: boolean
        description: Success is true if the account exists.
      accountAddress:
        type: string
        description: The account address for the user.
      rpId:
        type: string
        description: Relaying party id for the request.
      rpName:
        type: string
        description: Relaying party name for the request.
      didDocument:
        $ref: '#/definitions/identityDidDocument'
        description: The DID Document for the wallet.
      accountInfo:
        $ref: '#/definitions/commonAccountInfo'
        description: The account info for the wallet.
      ucanTokenHeader:
        type: string
        format: byte
        description: The UCAN token authorization header for subsequent requests.
    description: LoginFinishResponse is the response to a Login request.
  v1LoginStartRequest:
    type: object
    properties:
      origin:
        type: string
        description: The origin of the request. This is used to query the Blockchain for the Service DID.
      accountAddress:
        type: string
        description: The Sonr account address for the user.
    description: LoginStartRequest is the request to login to an account.
  v1LoginStartResponse:
    type: object
    properties:
      success:
        type: boolean
        description: Success is true if the account exists.
      accountAddress:
        type: string
        description: The account address for the user.
      credentialOptions:
        type: string
        description: Json encoded WebAuthn credential options for the user to sign with.
      rpId:
        type: string
        description: Relaying party id for the request.
      rpName:
        type: string
        description: Relaying party name for the request.
    description: LoginStartResponse is the response to a Login request.
  v1RefreshSharesRequest:
    type: object
    properties:
      credentialResponse:
        type: string
      sessionId:
        type: string
    description: RefreshSharesRequest is the request to refresh the keypair.
  v1RefreshSharesResponse:
    type: object
    properties:
      id:
        type: string
        format: byte
      address:
        type: string
      didDocument:
        $ref: '#/definitions/identityDidDocument'
    description: RefreshSharesResponse is the response to a Refresh request.
  v1RegisterFinishRequest:
    type: object
    properties:
      uuid:
        type: string
        description: The previously generated session id.
      credentialResponse:
        type: string
        description: The signed credential response from the user.
      origin:
        type: string
        description: The origin of the request. This is used to query the Blockchain for the Service DID.
    description: RegisterFinishRequest is the request to CreateAccount a new key from the private key.
  v1RegisterFinishResponse:
    type: object
    properties:
      id:
        type: string
        format: byte
        description: The id of the account.
      address:
        type: string
        description: The address of the account.
      rpId:
        type: string
        description: Relaying party id for the request.
      rpName:
        type: string
        description: Relaying party name for the request.
      didDocument:
        $ref: '#/definitions/identityDidDocument'
        description: The DID Document for the wallet.
      accountInfo:
        $ref: '#/definitions/commonAccountInfo'
        description: The account info for the wallet.
      ucanTokenHeader:
        type: string
        format: byte
        description: The UCAN token authorization header for subsequent requests.
    description: RegisterFinishResponse is the response to a CreateAccount request.
  v1RegisterStartRequest:
    type: object
    properties:
      origin:
        type: string
        description: The origin of the request. This is used to query the Blockchain for the Service DID.
      deviceLabel:
        type: string
        description: The user defined label for the device.
      securityThreshold:
        type: integer
        format: int32
        description: The security threshold for the wallet account.
      passcode:
        type: string
        description: The recovery passcode for the wallet account.
      uuid:
        type: string
        description: The Unique Identifier for the client device. Typically in a cookie.
    description: RegisterStartRequest is the request to register a new account.
  v1RegisterStartResponse:
    type: object
    properties:
      creationOptions:
        type: string
        description: Credential options for the user to sign with WebAuthn.
      rpId:
        type: string
        description: Relaying party id for the request.
      rpName:
        type: string
        description: Relaying party name for the request.
    description: RegisterStartResponse is the response to a Register request.
  v1beta1PageRequest:
    type: object
    properties:
      key:
        type: string
        format: byte
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
      offset:
        type: string
        format: uint64
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
      limit:
        type: string
        format: uint64
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
      countTotal:
        type: boolean
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
      reverse:
        type: boolean
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest pagination = 2;
       }
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
  v1beta1PageResponse:
    type: object
    properties:
      nextKey:
        type: string
        format: byte
        description: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently. It will be empty if
          there are no more results.
      total:
        type: string
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
    description: |-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding request message has used PageRequest.

       message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
