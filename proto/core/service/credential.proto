syntax = "proto3";
package sonrhq.core.service;

option go_package = "github.com/sonrhq/core/x/service/types";


// WebauthnCredential contains all needed information about a WebAuthn credential for storage
message WebauthnCredential {
  // A probabilistically-unique byte sequence identifying a public key credential source and its authentication assertions.
  bytes id = 1;

	// The public key portion of a Relying Party-specific credential key pair, generated by an authenticator and returned to
	// a Relying Party at registration time (see also public key credential). The private key portion of the credential key
	// pair is known as the credential private key. Note that in the case of self attestation, the credential key pair is also
	// used as the attestation key pair, see self attestation for details.
  bytes public_key = 2;

	// The attestation format used (if any) by the authenticator when creating the credential.
  string attestation_type = 3;

  // The transports used by the authenticator when creating the credential.
  repeated string transport = 4;

	// The Authenticator information for a given certificate
  WebauthnAuthenticator authenticator = 5;
}

// WebauthnAuthenticator contains certificate information about a WebAuthn authenticator
message WebauthnAuthenticator {
  // The AAGUID of the authenticator. An AAGUID is defined as an array containing the globally unique
	// identifier of the authenticator model being sought.
  bytes aaguid = 1;

  // SignCount -Upon a new login operation, the Relying Party compares the stored signature counter value
	// with the new signCount value returned in the assertionâ€™s authenticator data. If this new
	// signCount value is less than or equal to the stored value, a cloned authenticator may
	// exist, or the authenticator may be malfunctioning.
  uint32 sign_count = 2;

  // CloneWarning - This is a signal that the authenticator may be cloned, i.e. at least two copies of the
	// credential private key may exist and are being used in parallel. Relying Parties should incorporate
	// this information into their risk scoring. Whether the Relying Party updates the stored signature
	// counter value in this case, or not, or fails the authentication ceremony or not, is Relying Party-specific.
  bool clone_warning = 3;
}
