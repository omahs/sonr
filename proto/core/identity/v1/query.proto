syntax = "proto3";
package sonrhq.core.identity.v1;

import "core/identity/v1/did.proto";
import "core/identity/v1/genesis.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/sonrhq/core/x/identity/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sonr/core/identity/params";
  }

  // Queries a DidDocument by index.
  rpc Did(QueryGetDidRequest) returns (QueryGetDidResponse) {
    option (google.api.http).get = "/sonr/core/identity/did/{did}";
  }

  //Queries a DIDDocument for the matching key
  rpc DidByKeyID(QueryDidByKeyIDRequest) returns (QueryDidByKeyIDResponse) {
    option (google.api.http).get = "/sonr/core/identity/did/key/{key_id}";
  }

  //Queries a DIDDocument for the matching AlsoKnownAs
  rpc DidByAlsoKnownAs(QueryDidByAlsoKnownAsRequest) returns (QueryDidByAlsoKnownAsResponse) {
    option (google.api.http).get = "/sonr/core/identity/did/aka/{aka_id}";
  }
  // Queries a list of DidDocument items.
  rpc DidAll(QueryAllDidRequest) returns (QueryAllDidResponse) {
    option (google.api.http).get = "/sonr/core/identity/did";
  }

  //Queries a DIDDocument for the matching service
  rpc Service(QueryGetServiceRequest) returns (QueryGetServiceResponse) {
    option (google.api.http).get = "/sonr/core/identity/service/{origin}";
  }


  //Queries a DIDDocument for the matching service
  rpc ServiceAll(QueryAllServiceRequest) returns (QueryAllServiceResponse) {
    option (google.api.http).get = "/sonr/core/identity/service";
  }

  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetDidRequest {
  string did = 1;
}

message QueryGetDidResponse {
  DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryDidByKeyIDRequest {
  string key_id = 1;
}

message QueryDidByKeyIDResponse {
  DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryDidByAlsoKnownAsRequest {
  string aka_id = 1;
}

message QueryDidByAlsoKnownAsResponse {
  DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryAllDidRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllDidResponse {
  repeated DidDocument didDocument = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryGetServiceRequest {
  string origin = 1;
}

message QueryGetServiceResponse {
  Service service = 1 [(gogoproto.nullable) = false];
}

message QueryAllServiceRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllServiceResponse {
  repeated Service services = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
