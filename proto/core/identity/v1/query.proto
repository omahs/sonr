syntax = "proto3";
package sonrhq.core.identity.v1;

import "core/identity/v1/did.proto";
import "core/identity/v1/genesis.proto";
import "core/identity/v1/hns.proto";
import "core/identity/v1/vc.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/sonrhq/core/x/identity/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sonr/core/identity/params";
  }
  // Queries a DidDocument by index.
  rpc Did(QueryGetDidRequest) returns (QueryGetDidResponse) {
    option (google.api.http).get = "/sonr/core/did/{did}";
  }

  // Queries a list of DidDocument items.
  rpc DidAll(QueryAllDidRequest) returns (QueryAllDidResponse) {
    option (google.api.http).get = "/sonr/core/did";
  }

  //Queries a DIDDocument for the matching service
  rpc QueryByService(QueryByServiceRequest) returns (QueryByServiceResponse) {
    option (google.api.http).get = "/sonr/core/did/service/{service_id}";
  }

  //Queries a DIDDocument for the matching key
  rpc QueryByKeyID(QueryByKeyIDRequest) returns (QueryByKeyIDResponse) {
    option (google.api.http).get = "/sonr/core/did/key/{key_id}";
  }

  //Queries a DIDDocument for the matching AlsoKnownAs
  rpc QueryByAlsoKnownAs(QueryByAlsoKnownAsRequest) returns (QueryByAlsoKnownAsResponse) {
    option (google.api.http).get = "/sonr/core/did/aka/{aka_id}";
  }

  //Queries a list of DIDDocument for the matching method
  rpc QueryByMethod(QueryByMethodRequest) returns (QueryByMethodResponse) {
    option (google.api.http).get = "/sonr/core/did/method/{method_id}";
  }

  // Queries a list of QueryByNetwork items.
  rpc QueryByNetwork(QueryByNetworkRequest) returns (QueryByNetworkResponse) {
    option (google.api.http).get = "/sonr/core/did/network/{network_id}";
  }
  // Queries a DomainRecord by index.
  rpc DomainRecord(QueryGetDomainRecordRequest) returns (QueryGetDomainRecordResponse) {
    option (google.api.http).get = "/sonr/core/domain/{tld}/{domain}";
  }

  // Queries a list of DomainRecord items.
  rpc DomainRecordAll(QueryAllDomainRecordRequest) returns (QueryAllDomainRecordResponse) {
    option (google.api.http).get = "/sonr/core/identity/domain_registry";
  }

  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetDidRequest {
  string did = 1;
}

message QueryGetDidResponse {
  DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryByServiceRequest {
  string service_id = 1;
}

message QueryByServiceResponse {
  DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryByKeyIDRequest {
  string key_id = 1;
}

message QueryByKeyIDResponse {
  DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryByAlsoKnownAsRequest {
  string aka_id = 1;
}

message QueryByAlsoKnownAsResponse {
  DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryByMethodRequest {
  string method_id = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryByMethodResponse {
  repeated DidDocument didDocument = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllDidRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllDidResponse {
  repeated DidDocument didDocument = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryByNetworkRequest {
  string network_id = 1;
}

message QueryByNetworkResponse {
  repeated DidDocument didDocument = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetDomainRecordRequest {
  string tld = 1;
  string domain = 2;
}

message QueryGetDomainRecordResponse {
  DomainRecord domainRecord = 1 [(gogoproto.nullable) = false];
}

message QueryAllDomainRecordRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllDomainRecordResponse {
  repeated DomainRecord domainRecord = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
