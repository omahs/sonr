syntax = "proto3";

package sonrhq.core.identity;

import "core/identity/did.proto";
import "core/identity/genesis.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "core/identity/claims.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/sonrhq/core/x/identity/types";

// Query defines the gRPC querier service.
service Query {

  // Parameters for the identity module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sonr/core/identity/params";

  }

  // Get a DIDDocument by DID
  rpc Did (QueryGetDidRequest) returns (QueryGetDidResponse) {
    option (google.api.http).get = "/sonr/core/identity/did/{did}";

  }

  // Get a DIDDocument from a key id
  rpc DidByKeyID (QueryDidByKeyIDRequest) returns (QueryDidByKeyIDResponse) {
    option (google.api.http).get = "/sonr/core/identity/did/key/{key_id}";

  }

  // Get a DIDDocument from an Alias
  rpc DidByAlsoKnownAs (QueryDidByAlsoKnownAsRequest) returns (QueryDidByAlsoKnownAsResponse) {
    option (google.api.http).get = "/sonr/core/identity/did/aka/{aka_id}";

  }

  // Get All DIDDocuments
  rpc DidAll (QueryAllDidRequest) returns (QueryAllDidResponse) {
    option (google.api.http).get = "/sonr/core/identity/did";

  }

  // this line is used by starport scaffolding # 2

  // Queries a list of AliasAvailable items.
  rpc AliasAvailable (QueryAliasAvailableRequest) returns (QueryAliasAvailableResponse) {
    option (google.api.http).get = "/sonr/core/identity/alias/{alias}";

  }

  // Queries a list of DidByOwner items.
  rpc DidByOwner (QueryDidByOwnerRequest) returns (QueryDidByOwnerResponse) {
    option (google.api.http).get = "/sonrhq/core/identity/did/owner/{owner}";

  }

  // Queries a list of ClaimableWallet items.
  rpc ClaimableWallet    (QueryGetClaimableWalletRequest) returns (QueryGetClaimableWalletResponse) {
    option (google.api.http).get = "/sonrhq/core/identity/claimable_wallet/{id}";

  }
  rpc ClaimableWalletAll (QueryAllClaimableWalletRequest) returns (QueryAllClaimableWalletResponse) {
    option (google.api.http).get = "/sonrhq/core/identity/claimable_wallet";

  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {

  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetDidRequest {

  // did is the unique identifier of the DIDDocument - it appears like (did:sonr:...)
  string did = 1;
}

message QueryGetDidResponse {

  // A DIDDocument is a JSON-LD object that contains a set of public keys
  DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryDidByKeyIDRequest {

  // key_id is the unique identifier of the DIDDocument - it appears like (did:sonr:...#key-1)
  string key_id = 1;
}

message QueryDidByKeyIDResponse {

  // A DIDDocument is a JSON-LD object that contains a set of public keys
  DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryDidByAlsoKnownAsRequest {

  // aka_id is the unique identifier of the DIDDocument - it appears like ("example.snr")
  string aka_id = 1;
}

message QueryDidByAlsoKnownAsResponse {

  // A DIDDocument is a JSON-LD object that contains a set of public keys
  DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryAllDidRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllDidResponse {
  repeated DidDocument                            didDocument = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination  = 2;
}

message QueryAliasAvailableRequest {

  // alias is the unique identifier of the DIDDocument - it appears like ("example.snr")
  string alias = 1;
}

message QueryAliasAvailableResponse {
  bool        available         = 1;
  DidDocument existing_document = 2 [(gogoproto.nullable) = true];
}

message QueryDidByOwnerRequest {
  string owner = 1;
}

message QueryDidByOwnerResponse {
  DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryGetClaimableWalletRequest {
  uint64 id = 1;
}

message QueryGetClaimableWalletResponse {
  ClaimableWallet ClaimableWallet = 1 [(gogoproto.nullable) = false];
}

message QueryAllClaimableWalletRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllClaimableWalletResponse {
  repeated ClaimableWallet                        ClaimableWallet = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination      = 2;
}

