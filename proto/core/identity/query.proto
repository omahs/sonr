syntax = "proto3";

package sonrhq.core.identity;

import "core/identity/did.proto";
import "core/identity/genesis.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/sonrhq/core/x/identity/types";

// Query defines the gRPC querier service.
service Query {

  // Parameters for the identity module.

  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

  // #### {{.RequestType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .RequestType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


  // #### {{.ResponseType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sonr/core/identity/params";

  }

  // Get a DIDDocument by DID

  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

  // #### {{.RequestType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .RequestType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


  // #### {{.ResponseType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  rpc Did (QueryGetDidRequest) returns (QueryGetDidResponse) {
    option (google.api.http).get = "/sonr/core/identity/did/{did}";

  }

  // Get a DIDDocument from a key id

  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

  // #### {{.RequestType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .RequestType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


  // #### {{.ResponseType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  rpc DidByKeyID (QueryDidByKeyIDRequest) returns (QueryDidByKeyIDResponse) {
    option (google.api.http).get = "/sonr/core/identity/did/key/{key_id}";

  }

  // Get a DIDDocument from an Alias

  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

  // #### {{.RequestType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .RequestType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


  // #### {{.ResponseType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  rpc DidByAlsoKnownAs (QueryDidByAlsoKnownAsRequest) returns (QueryDidByAlsoKnownAsResponse) {
    option (google.api.http).get = "/sonr/core/identity/did/aka/{aka_id}";

  }

  // Queries a list of DidByPubKey items.
  rpc DidByPubKey (QueryDidByPubKeyRequest) returns (QueryDidByPubKeyResponse) {
    option (google.api.http).get = "/sonrhq/core/identity/did/pubkey/{pubkey}/{create}";
  }
  // Get All DIDDocuments

  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

  // #### {{.RequestType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .RequestType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


  // #### {{.ResponseType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  rpc DidAll (QueryAllDidRequest) returns (QueryAllDidResponse) {
    option (google.api.http).get = "/sonr/core/identity/did";

  }

  // Get a Service from Origin

  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

  // #### {{.RequestType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .RequestType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


  // #### {{.ResponseType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  rpc Service (QueryGetServiceRequest) returns (QueryGetServiceResponse) {
    option (google.api.http).get = "/sonr/core/identity/service/{origin}";

  }

  // Get all Services

  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".

  // #### {{.RequestType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .RequestType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}


  // #### {{.ResponseType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  rpc ServiceAll (QueryAllServiceRequest) returns (QueryAllServiceResponse) {
    option (google.api.http).get = "/sonr/core/identity/service";

  }

  // this line is used by starport scaffolding # 2

}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {

  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetDidRequest {

  // did is the unique identifier of the DIDDocument - it appears like (did:sonr:...)
  string did = 1;
}

message QueryGetDidResponse {

  // A DIDDocument is a JSON-LD object that contains a set of public keys
  ResolvedDidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryDidByKeyIDRequest {

  // key_id is the unique identifier of the DIDDocument - it appears like (did:sonr:...#key-1)
  string key_id = 1;
}

message QueryDidByKeyIDResponse {

  // A DIDDocument is a JSON-LD object that contains a set of public keys
  ResolvedDidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryDidByAlsoKnownAsRequest {

  // aka_id is the unique identifier of the DIDDocument - it appears like ("example.snr")
  string aka_id = 1;
}

message QueryDidByAlsoKnownAsResponse {

  // A DIDDocument is a JSON-LD object that contains a set of public keys
  ResolvedDidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryAllDidRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllDidResponse {
  repeated DidDocument                            didDocument = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination  = 2;
}

message QueryGetServiceRequest {

  // origin is the hostname of the calling service - it appears like ("test.com")
  string origin = 1;
}

message QueryGetServiceResponse {
  // A Service is a JSON-LD object that contains relaying information to authenticate a client
  Service service = 1 [(gogoproto.nullable) = false];
  // Challenge is a random string that is used to authenticate the client
  string challenge = 2;
}

message QueryAllServiceRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllServiceResponse {
  repeated Service                                services   = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


// this line is used by starport scaffolding # 3
message QueryDidByPubKeyRequest {
    // Public key is a base64 encoded string of the public key
    string pubkey = 1;

    // Create account if it doesn't exist
    bool create = 2;
}

message QueryDidByPubKeyResponse {}

// ResolvedDidDocument is a JSON-LD object that contains a set of public keys and verification methods that are used to authenticate the DID subject.
message ResolvedDidDocument {
  repeated string context = 1;
  string id = 2;
  repeated string controller = 3; //optional
  repeated VerificationMethod verification_method = 4; // optional
  repeated VerificationRelationship authentication = 5; // optional
  repeated VerificationRelationship assertion_method = 6; // optional
  repeated VerificationRelationship capability_invocation = 7; // optional
  repeated VerificationRelationship capability_delegation = 8; // optional
  repeated VerificationRelationship key_agreement = 9; // optional
  repeated Service service = 10; // optional
  repeated string also_known_as = 11; // optional
  repeated KeyValuePair metadata = 12; // optional
}
