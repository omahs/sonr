syntax = "proto3";

package sonrhq.core.identity;

import "core/identity/did.proto";
import "core/identity/genesis.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "core/vault/info.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/sonrhq/core/x/identity/types";

// Query defines the gRPC querier service.
service Query {
  // Returns parameters for the `x/identity` module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/core/params/identity";
  }

  // Get All Sonr Identifications `did:sonr:...`
  rpc DidAll(QueryAllDidRequest) returns (QueryAllDidResponse) {
    option (google.api.http).get = "/core/id";
  }

  // Get All Wallet Identifications for Bitcoin `did:btcr:...`
  rpc DidAllBtc(QueryAllDidRequest) returns (QueryAllDidResponse) {
    option (google.api.http).get = "/core/id/btc";
  }

  // Get All Wallet Identifications for Ethereum `did:ethr:...`
  rpc DidAllEth(QueryAllDidRequest) returns (QueryAllDidResponse) {
    option (google.api.http).get = "/core/id/eth";
  }

  // Returns Identification based on a DID
  rpc Did (QueryGetDidRequest) returns (QueryGetDidResponse) {
    option (google.api.http).get = "/core/id/{did}";
  }

  // Returns Identification based on an owner
  rpc DidByOwner (QueryDidByOwnerRequest) returns (QueryDidByOwnerResponse) {
    option (google.api.http).get = "/core/id/owner/{owner}";
  }

  // Returns Identification based on an alias *only Sonr Identities
  rpc DidByAlsoKnownAs (QueryDidByAlsoKnownAsRequest) returns (QueryDidByAlsoKnownAsResponse) {
    option (google.api.http).get = "/core/id/alias/{alias}";
  }

  // Checks if a given alias is available to register *only Sonr Identities
  rpc AliasAvailable (QueryAliasAvailableRequest) returns (QueryAliasAvailableResponse) {
    option (google.api.http).get = "/core/id/alias/{alias}/check";
  }

  // !
  // ||--------------------------------------------------------------------------------||
  // ! ||                                 Gateway Methods || !
  // ||--------------------------------------------------------------------------------||


  // CreateWallet creates a new wallet with a specified name and token type for
  // a given Identity.
  rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse) {
    option (google.api.http) = {
      post : "/highway/id/{alias}/wallets/create/{coin_type}/{name}"
    };
  }

  // SignWallet signs a message with a given wallet.
  rpc SignWallet(SignWalletRequest) returns (SignWalletResponse) {
    option (google.api.http) = {
      post : "/highway/id/{alias}/wallets/{address}/sign"
      body : "*"
    };
  }

  // VerifyWallet verifies a message with a given wallet.
  rpc VerifyWallet(VerifyWalletRequest) returns (VerifyWalletResponse) {
    option (google.api.http) = {
      post : "/highway/id/{alias}/wallets/{address}/verify"
      body : "*"
    };
  }

  // GetWallet returns a wallet for a given address.
  rpc GetWallet(GetWalletRequest) returns (GetWalletResponse) {
    option (google.api.http) = {
      get : "/highway/id/{alias}/wallets/{address}"
    };
  }

  // ListWallets returns all wallets for a given Identity.
  rpc ListWallets(ListWalletsRequest) returns (ListWalletsResponse) {
    option (google.api.http) = {
      get : "/highway/id/{alias}/wallets"
    };
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetDidRequest {
  // did is the unique identifier of the DIDDocument - it appears like (did:sonr:...)
  string did = 1;
}

message QueryGetDidResponse {
  // A DIDDocument is a JSON-LD object that contains a set of public keys
  Identification didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryDidByAlsoKnownAsRequest {
  // aka_aliasid is the unique identifier of the DIDDocument - it appears like ("example.snr")
  string alias = 1;
}

message QueryDidByAlsoKnownAsResponse {
  // A DIDDocument is a JSON-LD object that contains a set of public keys
  Identification didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryAllDidRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllDidResponse {
  repeated Identification                            didDocument = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination  = 2;
}

message QueryAliasAvailableRequest {
  // alias is the unique identifier of the DIDDocument - it appears like ("example.snr")
  string alias = 1;
}

message QueryAliasAvailableResponse {
  bool        available         = 1;
  Identification existing_document = 2 [(gogoproto.nullable) = true];
}

message QueryDidByOwnerRequest {
  string owner = 1;
}

message QueryDidByOwnerResponse {
  Identification didDocument = 1 [(gogoproto.nullable) = false];
}

// !
// ||--------------------------------------------------------------------------------||
// ! ||                          Gateway API Request/Response || !
// ||--------------------------------------------------------------------------------||

// CreateWalletRequest is the request type for the Gateway/CreateWallet RPC
// method.
message CreateWalletRequest {
  string alias = 1;
  string coin_type = 2;
  string name = 3;
}

// CreateWalletResponse is the response type for the Gateway/CreateWallet RPC
// method.
message CreateWalletResponse {
  string address = 1;
  DIDDocument owner = 2;
  core.vault.AccountInfo account_info = 3;
}

// SignWalletRequest is the request type for the Gateway/SignWallet RPC method.
message SignWalletRequest {
  string alias = 1;
  string address = 2;
  bytes message = 3;
}

// SignWalletResponse is the response type for the Gateway/SignWallet RPC
// method.
message SignWalletResponse {
  bytes signature = 1;
  bytes message = 2;
  core.vault.AccountInfo account_info = 3;
  DIDDocument owner = 4;
}

// VerifyWalletRequest is the request type for the Gateway/VerifyWallet RPC
// method.
message VerifyWalletRequest {
  string alias = 1;
  string address = 2;
  bytes message = 3;
  bytes signature = 4;
}

// VerifyWalletResponse is the response type for the Gateway/VerifyWallet RPC
// method.
message VerifyWalletResponse {
  bool verified = 1;
  core.vault.AccountInfo account_info = 2;
  DIDDocument owner = 3;
}

// GetWalletRequest is the request type for the Gateway/GetWallet RPC method.
message GetWalletRequest {
  string alias = 1;
  string address = 2;
}

// GetWalletResponse is the response type for the Gateway/GetWallet RPC method.
message GetWalletResponse {
  core.vault.AccountInfo account_info = 1;
  DIDDocument owner = 2;
}

// ListWalletsRequest is the request type for the Gateway/ListWallets RPC
// method.
message ListWalletsRequest { string alias = 1; }

// ListWalletsResponse is the response type for the Gateway/ListWallets RPC
// method.
message ListWalletsResponse {
  repeated core.vault.AccountInfo account_infos = 1;
  DIDDocument owner = 2;
}
