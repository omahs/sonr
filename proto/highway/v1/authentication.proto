syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package sonrhq.highway.v1;

import "core/identity/did.proto";
import "sonr/common/info.proto";
import "highway/v1/mpc.proto";

option go_package = "github.com/sonrhq/core/types/highway/v1;highwayv1";

// ChallengeRequest is the request to generate a challenge.
message ChallengeRequest {
  // The Unique Identifier for the client device. Typically in a cookie.
  string uuid = 1;

  // The origin of the request. This is used to query the Blockchain for the Service DID.
  string origin = 2;
}

// ChallengeResponse is the response to a Challenge request.
message ChallengeResponse {
  // Relaying party id for the request.
  string rp_id = 1;

  // Relaying party name for the request.
  string rp_name = 2;

  // Credential Options for the request.
  string credential_options = 3;
}

// KeygenRequest is the request to generate a keypair.
message KeygenRequest {
  // The Unique Identifier for the client device. Typically in a cookie.
  string uuid = 1;

  // The origin of the request. This is used to query the Blockchain for the Service DID.
  string origin = 2;

  // The user defined name for the account.
  string username = 3;

  // The signed credential response from the user.
  string credential_response = 4;

  // Public Key base64 cbor from Credential.
  string public_key = 5;

  // The security threshold for the wallet account.
  int32 security_threshold = 6;
}

// KeygenResponse is the response to a Keygen request.
message KeygenResponse {
  // Success is true if the account was created.
  bool success = 1;

  // The address of the account.
  string address = 2;

  // The DID of the account.
  string did = 3;

  // The DID Document for the wallet.
  core.identity.DidDocument primary = 4;

  // The DID Document for the wallet.
  repeated Account accounts = 5;

  // Transaction hash for the account creation.
  string transaction_hash = 6;

  // JWT for the account.
  string jwt = 7;
}

// LoginFinishRequest is the request to login to an account.
message LoginRequest {
  // Address of the account to login to.
  string account_address = 1;

  // The Username of the account to login to.
  string username = 2;

  // The signed credential response from the user.
  string credential_response = 3;

  // The origin of the request. This is used to query the Blockchain for the Service DID.
  string origin = 4;
}

// LoginFinishResponse is the response to a Login request.
message LoginResponse {
  // Success is true if the account was created.
  bool success = 1;

  // The address of the account.
  string address = 2;

  // The DID of the account.
  string did = 3;

  // The keyshares for the account.
  map<string, bytes> keyshares = 4;

  // The DID Document for the wallet.
  core.identity.DidDocument did_document = 5;

  // JWT for the account.
  string jwt = 6;
}

// QueryAliasRequest is the request to query an alias.
message QueryAliasRequest {
  // The alias to query.
  string alias = 1;
}

// QueryAliasResponse is the response to a QueryAlias request.
message QueryAliasResponse {
  // Success is true if the alias exists.
  bool available = 1;

  // The address of the account.
  string address = 2;

  // The DID of the account.
  string did = 3;

  // The DID Document for the wallet.
  core.identity.DidDocument did_document = 4;
}

// RegisterFinishRequest is the request to CreateAccount a new key from the private key.
message QueryServiceRequest {
  // The origin of the request. This is used to query the Blockchain for the Service DID.
  string origin = 1;
}

// RegisterFinishResponse is the response to a CreateAccount request.
message QueryServiceResponse {
  // The address of the account.
  string challenge = 1;

  // Relaying party id for the request.
  string rp_id = 2;

  // Relaying party name for the request.
  string rp_name = 3;

  // Credential Options for the request.
  string credential_options = 4;
}


// RegisterFinishRequest is the request to CreateAccount a new key from the private key.
message QueryServiceAssertionRequest {
  // The origin of the request. This is used to query the Blockchain for the Service DID.
  string origin = 1;

  // The Alias of the account to login to.
  string alias = 2;
}

// RegisterFinishResponse is the response to a CreateAccount request.
message QueryServiceAssertionResponse {
  // The Origin of the request.
  string origin = 1;

  // The Alias of the account to login to.
  string alias = 2;

  // The address of the account.
  string address = 3;

  // The Assertion options for the request.
  string assertion_options = 4;
}


// LoginStartRequest is the request to login to an account.
message QueryDocumentRequest {
  // The DID of the account to login to.
  string did = 1;
}

// LoginStartResponse is the response to a Login request.
message QueryDocumentResponse {
  // Success is true if the account exists.
  bool success = 1;

  // The account address for the user.
  string account_address = 2;

  // The DID Document for the wallet.
  core.identity.DidDocument did_document = 3;
}

// ==================================================================
// GRPC/REST SERVICE
// ==================================================================

// Vault is the service used for managing a node's keypair.
service Authentication {
  rpc Challenge(ChallengeRequest) returns (ChallengeResponse) {}
  rpc Keygen(KeygenRequest) returns (KeygenResponse) {}
  rpc Login(LoginRequest) returns (LoginResponse) {}
  rpc QueryDocument(QueryDocumentRequest) returns (QueryDocumentResponse) {}
  rpc QueryService(QueryServiceRequest) returns (QueryServiceResponse) {}
  rpc QueryServiceAssertion(QueryServiceAssertionRequest) returns (QueryServiceAssertionResponse) {}
}
