syntax = "proto3";
package sonrhq.highway.v1;

import "gogoproto/gogo.proto";
import "core/identity/did.proto";

option go_package = "github.com/sonrhq/core/types/highway/v1;highwayv1";

// Account represents a user's account on a blockchain or network. It contains the user's address, name, DID, and other information that is used to identify and manage the account.
message Account {
    //  This field represents the unique account address associated with the user. It is typically a hash or an encoded public key, depending on the underlying blockchain or network.
    string address = 1;

    // This field contains the human-readable name associated with the account. It is used for easier identification and management of the account by the user.
    string name = 2;

    // This field stores the Decentralized Identifier (DID) of the user, which is a unique, resolvable, and cryptographically verifiable identifier. DIDs are used to enable secure and decentralized identity management.
    string did = 3;

    // This field specifies the type of the cryptocurrency or token associated with the account. It is used to differentiate between various cryptocurrencies or tokens that the user may hold in their wallet.
    string coin_type = 4;

    // This field represents the identifier of the blockchain or network that the account is associated with. Chain IDs are used to distinguish between different blockchains or networks, such as Ethereum, Cosmos, or Filecoin.
    string chain_id = 5;

    // This field stores the base64 encoded public key of the account, which is used for cryptographic operations such as signing and verifying transactions. The public key is derived from the user's private key and is an essential part of the account's security.
    string public_key = 6;

    // This field stores the type of the public key. It is used to differentiate between various public key types, such as secp256k1, ed25519, and sr25519.
    string type = 7;
}

// CreateAccountRequest is the request to create an account.
message CreateAccountRequest {
  string name = 1;
  string coin_type = 2;
  string chain_id = 3;
}

// CreateAccountResponse is the response to a CreateAccount request.
message CreateAccountResponse {
  bool success = 1;
  string coin_type = 2;
  core.identity.DidDocument did_document = 3;
  Account new_account = 4;
}

// GetAccountRequest is the request to get an account.
message GetAccountRequest {
  string address = 1;
  string coin_type = 2;
}

// GetAccountResponse is the response to a GetAccount request.
message GetAccountResponse {
  bool success = 1;
  string coin_type = 2;
  repeated Account accounts = 4;
}

// ListAccountsRequest is the request to list the accounts.
message ListAccountsRequest {
  string address = 1;
  string coin_type = 2;
}

// ListAccountsResponse is the response to a ListAccounts request.
message ListAccountsResponse {
  bool success = 1;
  repeated Account accounts = 3;
}

// DeleteAccountRequest is the request to delete an account.
message DeleteAccountRequest {
  string address = 1;
  string target_did = 2;
}

// DeleteAccountResponse is the response to a DeleteAccount request.
message DeleteAccountResponse {
  bool success = 1;
  core.identity.DidDocument did_document = 2;
  repeated Account accounts = 3;
}

// SignMessageRequest is the request to sign a message with an account.
message SignMessageRequest {
  string did = 1;
  string message = 2;
}

// SignMessageResponse is the response to a SignWithAccount request.
message SignMessageResponse {
  bool success = 1;
  string did = 2;
  string signature = 3;
  string message = 4;
}

// VerifyWithAccountRequest is the request to verify a signature with an account.
message VerifyMessageRequest {
  string did = 1;
  string message = 2;
  string signature = 3;
}

// VerifyWithAccountResponse is the response to a VerifyWithAccount request.
message VerifyMessageResponse {
  bool success = 1;
  string did = 2;
}

// ==================================================================
// GRPC/REST SERVICE
// ==================================================================

// Mpc is the service used for managing a node's keypair.
service Mpc {
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {}
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {}
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {}
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {}
  rpc SignMessage(SignMessageRequest) returns (SignMessageResponse) {}
  rpc VerifyMessage(VerifyMessageRequest) returns (VerifyMessageResponse) {}
}
