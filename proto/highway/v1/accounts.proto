syntax = "proto3";
package sonrhq.highway.v1;

import "gogoproto/gogo.proto";
import "core/identity/did.proto";
import "google/api/annotations.proto";

option go_package = "github.com/sonrhq/core/types/highway/v1;highwayv1";

// Account represents a user's account on a blockchain or network. It contains the user's address, name, DID, and other information that is used to identify and manage the account.
message Account {
    //  This field represents the unique account address associated with the user. It is typically a hash or an encoded public key, depending on the underlying blockchain or network.
    string address = 1;

    // This field contains the human-readable name associated with the account. It is used for easier identification and management of the account by the user.
    string name = 2;

    // This field stores the Decentralized Identifier (DID) of the user, which is a unique, resolvable, and cryptographically verifiable identifier. DIDs are used to enable secure and decentralized identity management.
    string did = 3;

    // This field specifies the type of the cryptocurrency or token associated with the account. It is used to differentiate between various cryptocurrencies or tokens that the user may hold in their wallet.
    string coin_type = 4;

    // This field represents the identifier of the blockchain or network that the account is associated with. Chain IDs are used to distinguish between different blockchains or networks, such as Ethereum, Cosmos, or Filecoin.
    string chain_id = 5;

    // This field stores the base64 encoded public key of the account, which is used for cryptographic operations such as signing and verifying transactions. The public key is derived from the user's private key and is an essential part of the account's security.
    string public_key = 6;

    // This field stores the type of the public key. It is used to differentiate between various public key types, such as secp256k1, ed25519, and sr25519.
    string type = 7;
}

// KeygenRequest is the request to generate a keypair.
message KeygenRequest {
  string uuid = 1;
  string credential_response = 2;
}

// KeygenResponse is the response to a Keygen request.
message KeygenResponse {
  bool success = 1;
  bytes key_share = 2;
  string public_key = 3;
  string vault_cid = 4;
}

// CreateAccountRequest is the request to create an account.
message CreateAccountRequest {
  string sonr_id = 1;
  string coin_type = 2;
}

// CreateAccountResponse is the response to a CreateAccount request.
message CreateAccountResponse {
  bool success = 1;
  string coin_type = 2;
  core.identity.DidDocument did_document = 3;
  repeated Account accounts = 4;
}

// GetAccountRequest is the request to get an account.
message GetAccountRequest {
  string sonr_id = 1;
  string coin_type = 2;
}

// GetAccountResponse is the response to a GetAccount request.
message GetAccountResponse {
  bool success = 1;
  string coin_type = 2;
  repeated Account accounts = 4;
}

// ListAccountsRequest is the request to list the accounts.
message ListAccountsRequest {
  string sonr_id = 1;
}

// ListAccountsResponse is the response to a ListAccounts request.
message ListAccountsResponse {
  bool success = 1;
  repeated Account accounts = 3;
}

// DeleteAccountRequest is the request to delete an account.
message DeleteAccountRequest {
  string sonr_id = 1;
  string target_did = 2;
}

// DeleteAccountResponse is the response to a DeleteAccount request.
message DeleteAccountResponse {
  bool success = 1;
  core.identity.DidDocument did_document = 2;
  repeated Account accounts = 3;
}

// ==================================================================
// GRPC/REST SERVICE
// ==================================================================

// Mpc is the service used for managing a node's keypair.
service Mpc {
  // Create a new account
  //
  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
  //
  // #### {{.RequestType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .RequestType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  //
  //
  // #### {{.ResponseType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
    option (google.api.http) = {
      post: "/sonr/vault/accounts/{sonr_id}/create"
      body: "*"
    };
  }

  // List the accounts
  //
  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
  //
  // #### {{.RequestType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .RequestType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  //
  //
  // #### {{.ResponseType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {
    option (google.api.http) = {
      get: "/sonr/vault/accounts/{sonr_id}"
    };
  }

  // Get Account
  //
  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
  //
  // #### {{.RequestType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .RequestType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  //
  //
  // #### {{.ResponseType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
    option (google.api.http) = {
      get: "/sonr/vault/accounts/{sonr_id}/{coin_type}"
    };
  }

  // Delete Account
  //
  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
  //
  // #### {{.RequestType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .RequestType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  //
  //
  // #### {{.ResponseType.Name}}
  // | Name | Type | Description |
  // | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
  // | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {
    option (google.api.http) = {
      post: "/sonr/vault/accounts/{target_did}/delete"
      body: "*"
    };
  }
}
