syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package sonrhq.protocol.auth.v1;

import "core/identity/did.proto";
import "google/api/annotations.proto";
import "protocol/vault/v1/models.proto";

option go_package = "github.com/sonrhq/core/x/identity/types/auth/v1";

// ==================================================================
// REGISTRATION
// ==================================================================

// ChallengeRequest is the request to generate a challenge.
message ChallengeRequest {
  // Optional RP ID to use for the challenge.
  string rp_id = 1;

  // Username to use for the AlsoKnownAs field in the didDoc
  string username = 2;
}

// ChallengeResponse is the response to a Challenge request.
message ChallengeResponse {
  string session_id = 1;
  string creation_options = 2;
  string rp_name = 3;
  repeated string rp_origins = 4;
  string rp_icon = 5;
}

// ==================================================================
// AUTHENTICATION
// ==================================================================

// AuthorizeRequest is the request to generate a challenge.
message AuthorizeRequest {
  // Optional RP ID to use for the challenge.
  string rp_id = 1;

  // Identifier can be address or username.
  string identifier = 2;
}

// AuthorizeResponse is the response to a Challenge request.
message AuthorizeResponse {
  string session_id = 1;
  string request_options = 2;
  string rp_name = 3;
  repeated string rp_origins = 4;
  string rp_icon = 5;
}

// ==================================================================
// GRPC/REST SERVICE
// ==================================================================

// Auth is the service used for managing a node's JWT Sessions.
service Auth {
  // Challenge generates a challenge for registration returns it.
  rpc Challenge(ChallengeRequest) returns (ChallengeResponse) {
    option (google.api.http).get = "/sonr/protocol/auth/challenge/{rp_id}/{username}";
  }

  // Authorize generates a challenge for login and returns it.
  rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse) {
    option (google.api.http).get = "/sonr/protocol/auth/authorize/{rp_id}/{identifier}";
  }
}
