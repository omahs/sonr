import {
  DidDocument,
  VerificationMethod,
  VerificationMethods,
} from "@buf/sonr-hq_sonr.grpc_web/sonr/identity/did_pb";
import {
  Box,
  Center,
  Flex,
  Spacer,
  Tag,
  Text,
  useDisclosure,
} from "@chakra-ui/react";
import {
  AppShell,
  Button,
  ButtonGroup,
  Card,
  CardBody,
  Field,
  FormLayout,
  FormStep,
  FormStepper,
  Loader,
  NextButton,
  PrevButton,
  Property,
  PropertyList,
  StepForm,
  StepperCompleted,
  useSnackbar,
} from "@saas-ui/react";
import { ModalsProvider, useModals } from "@saas-ui/react";
import { Web3Address } from "@saas-ui/web3";
import Head from "next/head";
import axios from "axios";
import Link from "next/link";
import React from "react";
import { useState } from "react";
import {
  FiAtSign,
  FiCloud,
  FiDroplet,
  FiKey,
  FiLock,
  FiUserPlus,
} from "react-icons/fi";
import * as Yup from "yup";

import {
  getBase64WebEncodingFromBytes,
  getBytesFromBase64,
} from "../types/base64";

export default function SignUp() {
  const modals = useModals();
  const snackbar = useSnackbar();
  const [loading, setLoading] = useState(false);
  const [label, updateLabel] = useState("");
  const [address, setAddress] = useState("");
  const [vaultCid, setVaultCid] = useState("");
  const [didDocument, setDidDocument] = useState<DidDocument | null>(null);
  const [session, setSession] = useState("");
  const [credential, setCredential] = useState<PublicKeyCredential | null>(
    null
  );
  const [vm, setVm] = useState<VerificationMethod | null>(null);
  const schemas = {
    credential: Yup.object().shape({
      deviceLabel: Yup.string().required().label("Device Label"),
    }),
  };

  const yupResolver = (schema: any) => async (values: any) => {
    return {
      values,
    };
  };

  const onSubmit = (params: any) => {
    console.log(params);
    return new Promise((resolve) => {
      setTimeout(resolve, 1000);
      modals.closeAll();
    });
  };

  const createCredential = async (nextStep: () => void) => {
    const response = await fetch("/api/auth/challenge", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        username: label,
      },
    });

    const data = await response.json();
    const sessionId = data.session_id as string;
    setSession(sessionId);
    const credentialCreationOptions = JSON.parse(data.creation_options);
    const challenge = arrayBufferDecode(
      credentialCreationOptions.publicKey.challenge
    );
    const userId = arrayBufferDecode(
      credentialCreationOptions.publicKey.user.id
    );
    credentialCreationOptions.publicKey.challenge = challenge;
    credentialCreationOptions.publicKey.user.id = userId;
    if (credentialCreationOptions.publicKey.excludeCredentials) {
      for (
        var i = 0;
        i < credentialCreationOptions.publicKey.excludeCredentials.length;
        i++
      ) {
        credentialCreationOptions.publicKey.excludeCredentials[i].id =
          Uint8Array.from(
            credentialCreationOptions.publicKey.excludeCredentials[i]
              .id as string,
            (c) => c.charCodeAt(0)
          );
      }
    }
    delete credentialCreationOptions.publicKey.rp.id;
    console.log(credentialCreationOptions);
    const credential = await navigator.credentials.create(
      credentialCreationOptions
    );
    setCredential(credential as PublicKeyCredential);
    console.log(credential);
    snackbar.info("PassKey has been generated by your device.");
    nextStep();
  };

  const registerAccount = async function callVaultRegister(
    nextStep: () => void
  ): Promise<void> {
    modals.closeAll();
    if (!credential) {
      snackbar.error("Credential not found.");
      return;
    }
    setLoading(true);
    let credResp = credential.response as AuthenticatorAttestationResponse;
    let attestationObject = credResp.attestationObject;
    let clientDataJSON = credResp.clientDataJSON;
    let rawId = credential.rawId;
    setVaultCid(arrayBufferEncode(rawId));
    let credRespString = JSON.stringify({
      id: credential.id,
      type: credential.type,
      rawId: arrayBufferEncode(rawId),
      clientExtensionResults: credential.getClientExtensionResults(),
      response: {
        attestationObject: arrayBufferEncode(attestationObject),
        clientDataJSON: arrayBufferEncode(clientDataJSON),
      },
      transports: credResp.getTransports(),
    });
    const response = await fetch("/api/auth/register", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        session_id: session,
        credential_response: credRespString,
      }),
    });
    const resp = await response.json();
    console.log(resp);
    // Get response as object
    if (resp.success) {
      // Get response as object
      const vm = resp.verification_method as VerificationMethod;
      setVm(vm);
      setAddress(resp.address);
      setDidDocument(resp.did_document);
      setLoading(false);
      nextStep();
    } else {
      snackbar.error("Account registration failed.");
      setLoading(false);
      return;
    }
  };

  const getAirDrop = async function callVaultAirdrop(
    nextStep: () => void
  ): Promise<void> {
    const resp = await fetch("/api/blockchain/airdrop", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        address: address,
        coins: ["150snr"],
      }),
    });
    const data = await resp.json();
    console.log(data);
  };

  return (
    <>
      <Head>
        <title>Sonr Sandbox | Register</title>
        <meta
          name="description"
          content="API Test Utility for the Sonr Blockchain"
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AppShell
        maxWidth="100vw"
        navbar={
          <Flex borderBottomWidth="1px" py="2" px="4">
            <Link href="/">
              <Button variant="unstyled">
                <Text fontSize="xl" fontWeight="bold" paddingTop={1}>
                  Sonr Sandbox
                </Text>
              </Button>
            </Link>
            <Spacer />
            <Box>
              <Tag size="lg">v0.2.4</Tag>
            </Box>
          </Flex>
        }
      >
        <Center>
          <Box
            as="main"
            height={{
              base: "100%", // 0-48em
              md: "75%", // 48em-80em,
              xl: "50%", // 80em+
            }}
            width={[
              "100%", // 0-30em
              "80%", // 30em-48em
              "60%", // 48em-62em
              "40%", // 62em+
            ]}
          >
            <Card
              maxWidth="600px"
              variant="solid"
              title="Sonr.ID"
              subtitle="Use the Vault MPC Protocol with Webauthn."
              padding={4}
              action={
                <ButtonGroup>
                  <Link href="/">
                    <Button variant="unstyled" colorScheme="red">
                      Cancel
                    </Button>
                  </Link>
                </ButtonGroup>
              }
            >
              <CardBody margin={4}>
                <StepForm
                  defaultValues={{
                    deviceLabel: "",
                    credentialId: "",
                    credentialType: "",
                    credentialPublicKey: "",
                    credentialResponse: "",
                  }}
                  onSubmit={onSubmit}
                >
                  {({
                    isFirstStep,
                    isLastStep,
                    isCompleted,
                    nextStep,
                    prevStep,
                  }) => (
                    <FormLayout>
                      <FormStepper orientation="vertical">
                        <FormStep
                          name="project"
                          title="Generate PassKey"
                          resolver={yupResolver(schemas.credential)}
                        >
                          <FormLayout>
                            <Field
                              isRequired
                              name="username"
                              label="Username"
                              placeholder="steve"
                              onInput={(event) => {
                                // Check if the input is a string
                                const str = event.target as HTMLInputElement;
                                const value = str.value;
                                updateLabel(value);
                              }}
                            />
                            <Button
                              leftIcon={<FiKey />}
                              label="New PassKey"
                              onClick={() =>
                                label
                                  ? createCredential(nextStep)
                                  : snackbar.error(
                                      "Please enter a device label"
                                    )
                              }
                              variant="outline"
                            />
                          </FormLayout>
                        </FormStep>

                        <FormStep name="register" title="Register Account">
                          {loading ? (
                            <Flex>
                              <Loader>Running MPC Protocol...</Loader>
                            </Flex>
                          ) : (
                            <FormLayout>
                              <PropertyList>
                                <Property
                                  label="Label"
                                  value={label ? label : "No credential"}
                                />
                                <Property
                                  label="Credential ID"
                                  value={
                                    <Web3Address
                                      address={
                                        credential
                                          ? credential.id
                                          : "No credential"
                                      }
                                      startLength={credential ? 12 : 15}
                                      endLength={credential ? 4 : 0}
                                    />
                                  }
                                />
                                <Property
                                  label="Type"
                                  value={
                                    credential
                                      ? credential.type
                                      : "No credential"
                                  }
                                />
                                <Property label="Source" value="WebAuthn" />
                              </PropertyList>
                              <ButtonGroup>
                                <Button
                                  leftIcon={<FiUserPlus />}
                                  label="Register Account"
                                  onClick={() => {
                                    registerAccount(nextStep);
                                  }}
                                />
                              </ButtonGroup>
                            </FormLayout>
                          )}
                        </FormStep>

                        <FormStep name="faucet" title="Get Tokens from Faucet">
                          <FormLayout>
                            <Text>
                              Please confirm that your information is correct.
                            </Text>
                            <PropertyList>
                              <Property label="Address" />
                              <Button
                                variant="outline"
                                leftIcon={<FiAtSign />}
                                onClick={() => {
                                  navigator.clipboard.writeText(
                                    address ? address : ""
                                  );
                                  snackbar.info(
                                    "Copied Account Address to Clipboard."
                                  );
                                }}
                              >
                                <Web3Address
                                  address={address ? address : "N/A"}
                                  startLength={32}
                                  endLength={4}
                                />
                              </Button>
                              <Property label="Controller" />
                              <Button
                                variant="outline"
                                leftIcon={<FiCloud />}
                                onClick={() => {
                                  navigator.clipboard.writeText(
                                    vaultCid ? vaultCid : ""
                                  );
                                  snackbar.info(
                                    "Copied WebAuthn Controller to Clipboard."
                                  );
                                }}
                              >
                                <Web3Address
                                  address={vaultCid ? vaultCid : "N/A"}
                                  startLength={32}
                                  endLength={4}
                                />
                              </Button>
                            </PropertyList>
                            <ButtonGroup>
                              <Button
                                leftIcon={<FiDroplet />}
                                label="Get Airdrop"
                                onClick={() =>
                                  getAirDrop(nextStep).then(() => {
                                    snackbar.success(
                                      "Airdrop Successful. Please wait for the transaction to confirm."
                                    );
                                  })
                                }
                                variant="primary"
                              />
                            </ButtonGroup>
                          </FormLayout>
                        </FormStep>
                        <FormStep
                          name="confirm"
                          title="Broadcast Document Transaction"
                        >
                          <FormLayout>
                            <Text>
                              Please confirm that your information is correct.
                            </Text>
                            <ButtonGroup>
                              <NextButton />
                              <PrevButton variant="ghost" />
                            </ButtonGroup>
                          </FormLayout>
                        </FormStep>

                        <StepperCompleted>
                          <Loader>
                            We are setting up your project, just a moment...
                          </Loader>
                        </StepperCompleted>
                      </FormStepper>
                    </FormLayout>
                  )}
                </StepForm>
              </CardBody>
            </Card>
          </Box>
        </Center>
      </AppShell>
    </>
  );
}

function arrayBufferEncode(value: ArrayBuffer): string {
  return getBase64WebEncodingFromBytes(new Uint8Array(value));
}

function arrayBufferDecode(value: string): ArrayBuffer {
  if (value.length % 4 !== 0) {
    return Buffer.from(value, "base64");
  }
  return getBytesFromBase64(value);
}
