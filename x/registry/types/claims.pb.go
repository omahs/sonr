// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/registry/claims.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClaimableWallet struct {
	Id        uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator   string   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	PublicKey string   `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Keyshares []string `protobuf:"bytes,4,rep,name=keyshares,proto3" json:"keyshares,omitempty"`
	Count     int32    `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Claimed   bool     `protobuf:"varint,6,opt,name=claimed,proto3" json:"claimed,omitempty"`
}

func (m *ClaimableWallet) Reset()         { *m = ClaimableWallet{} }
func (m *ClaimableWallet) String() string { return proto.CompactTextString(m) }
func (*ClaimableWallet) ProtoMessage()    {}
func (*ClaimableWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_264c62de146ab0d2, []int{0}
}
func (m *ClaimableWallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimableWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimableWallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimableWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimableWallet.Merge(m, src)
}
func (m *ClaimableWallet) XXX_Size() int {
	return m.Size()
}
func (m *ClaimableWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimableWallet.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimableWallet proto.InternalMessageInfo

func (m *ClaimableWallet) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ClaimableWallet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ClaimableWallet) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *ClaimableWallet) GetKeyshares() []string {
	if m != nil {
		return m.Keyshares
	}
	return nil
}

func (m *ClaimableWallet) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ClaimableWallet) GetClaimed() bool {
	if m != nil {
		return m.Claimed
	}
	return false
}

func init() {
	proto.RegisterType((*ClaimableWallet)(nil), "sonrhq.core.registry.ClaimableWallet")
}

func init() { proto.RegisterFile("core/registry/claims.proto", fileDescriptor_264c62de146ab0d2) }

var fileDescriptor_264c62de146ab0d2 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x31, 0x4e, 0xf3, 0x30,
	0x18, 0x86, 0xe3, 0xb4, 0xe9, 0xff, 0xc7, 0x03, 0x48, 0x56, 0x07, 0x0b, 0x81, 0x65, 0xb1, 0x90,
	0x29, 0x19, 0x38, 0x01, 0x30, 0xb2, 0x65, 0x41, 0x62, 0x41, 0x8e, 0xf3, 0xa9, 0xb1, 0xea, 0xd6,
	0xc1, 0x76, 0x24, 0x7c, 0x0b, 0x8e, 0xc1, 0x51, 0x18, 0x3b, 0x32, 0xa2, 0xe4, 0x22, 0x28, 0x89,
	0x02, 0xe3, 0xfb, 0xbe, 0x8f, 0x64, 0x7f, 0x0f, 0xbe, 0x90, 0xc6, 0x42, 0x61, 0x61, 0xa7, 0x9c,
	0xb7, 0xa1, 0x90, 0x5a, 0xa8, 0x83, 0xcb, 0x5b, 0x6b, 0xbc, 0x21, 0x5b, 0x67, 0x8e, 0xb6, 0x79,
	0xcd, 0x47, 0x24, 0x5f, 0x90, 0xeb, 0x0f, 0x84, 0xcf, 0x1f, 0x46, 0x4c, 0x54, 0x1a, 0x9e, 0x84,
	0xd6, 0xe0, 0xc9, 0x19, 0x8e, 0x55, 0x4d, 0x11, 0x47, 0xd9, 0xba, 0x8c, 0x55, 0x4d, 0x28, 0xfe,
	0x27, 0x2d, 0x08, 0x6f, 0x2c, 0x8d, 0x39, 0xca, 0xd2, 0x72, 0x89, 0xe4, 0x0a, 0xe3, 0xb6, 0xab,
	0xb4, 0x92, 0x2f, 0x7b, 0x08, 0x74, 0x35, 0x8d, 0xe9, 0xdc, 0x3c, 0x42, 0x20, 0x97, 0x38, 0xdd,
	0x43, 0x70, 0x8d, 0xb0, 0xe0, 0xe8, 0x9a, 0xaf, 0xc6, 0xf5, 0xb7, 0x20, 0x5b, 0x9c, 0x48, 0xd3,
	0x1d, 0x3d, 0x4d, 0x38, 0xca, 0x92, 0x72, 0x0e, 0xd3, 0x63, 0xe3, 0x7f, 0xa0, 0xa6, 0x1b, 0x8e,
	0xb2, 0xff, 0xe5, 0x12, 0xef, 0xef, 0x3e, 0x7b, 0x86, 0x4e, 0x3d, 0x43, 0xdf, 0x3d, 0x43, 0xef,
	0x03, 0x8b, 0x4e, 0x03, 0x8b, 0xbe, 0x06, 0x16, 0x3d, 0xdf, 0xec, 0x94, 0x6f, 0xba, 0x2a, 0x97,
	0xe6, 0x50, 0xcc, 0x57, 0x16, 0x93, 0x88, 0xb7, 0x3f, 0x15, 0x3e, 0xb4, 0xe0, 0xaa, 0xcd, 0xa4,
	0xe2, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0x50, 0x38, 0x07, 0x30, 0x28, 0x01, 0x00, 0x00,
}

func (m *ClaimableWallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimableWallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimableWallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Claimed {
		i--
		if m.Claimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Count != 0 {
		i = encodeVarintClaims(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Keyshares) > 0 {
		for iNdEx := len(m.Keyshares) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keyshares[iNdEx])
			copy(dAtA[i:], m.Keyshares[iNdEx])
			i = encodeVarintClaims(dAtA, i, uint64(len(m.Keyshares[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintClaims(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintClaims(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintClaims(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintClaims(dAtA []byte, offset int, v uint64) int {
	offset -= sovClaims(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClaimableWallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovClaims(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovClaims(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovClaims(uint64(l))
	}
	if len(m.Keyshares) > 0 {
		for _, s := range m.Keyshares {
			l = len(s)
			n += 1 + l + sovClaims(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovClaims(uint64(m.Count))
	}
	if m.Claimed {
		n += 2
	}
	return n
}

func sovClaims(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClaims(x uint64) (n int) {
	return sovClaims(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClaimableWallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimableWallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimableWallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyshares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyshares = append(m.Keyshares, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Claimed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClaims(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClaims
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClaims
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClaims
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClaims        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClaims          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClaims = fmt.Errorf("proto: unexpected end of group")
)
