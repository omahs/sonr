// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/domain/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateTLDRecord struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgCreateTLDRecord) Reset()         { *m = MsgCreateTLDRecord{} }
func (m *MsgCreateTLDRecord) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTLDRecord) ProtoMessage()    {}
func (*MsgCreateTLDRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e2442c81dc82e6, []int{0}
}
func (m *MsgCreateTLDRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTLDRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTLDRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTLDRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTLDRecord.Merge(m, src)
}
func (m *MsgCreateTLDRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTLDRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTLDRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTLDRecord proto.InternalMessageInfo

func (m *MsgCreateTLDRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateTLDRecord) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgCreateTLDRecordResponse struct {
}

func (m *MsgCreateTLDRecordResponse) Reset()         { *m = MsgCreateTLDRecordResponse{} }
func (m *MsgCreateTLDRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTLDRecordResponse) ProtoMessage()    {}
func (*MsgCreateTLDRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e2442c81dc82e6, []int{1}
}
func (m *MsgCreateTLDRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTLDRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTLDRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTLDRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTLDRecordResponse.Merge(m, src)
}
func (m *MsgCreateTLDRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTLDRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTLDRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTLDRecordResponse proto.InternalMessageInfo

type MsgUpdateTLDRecord struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgUpdateTLDRecord) Reset()         { *m = MsgUpdateTLDRecord{} }
func (m *MsgUpdateTLDRecord) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTLDRecord) ProtoMessage()    {}
func (*MsgUpdateTLDRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e2442c81dc82e6, []int{2}
}
func (m *MsgUpdateTLDRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTLDRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTLDRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTLDRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTLDRecord.Merge(m, src)
}
func (m *MsgUpdateTLDRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTLDRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTLDRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTLDRecord proto.InternalMessageInfo

func (m *MsgUpdateTLDRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateTLDRecord) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgUpdateTLDRecordResponse struct {
}

func (m *MsgUpdateTLDRecordResponse) Reset()         { *m = MsgUpdateTLDRecordResponse{} }
func (m *MsgUpdateTLDRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTLDRecordResponse) ProtoMessage()    {}
func (*MsgUpdateTLDRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e2442c81dc82e6, []int{3}
}
func (m *MsgUpdateTLDRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTLDRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTLDRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTLDRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTLDRecordResponse.Merge(m, src)
}
func (m *MsgUpdateTLDRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTLDRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTLDRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTLDRecordResponse proto.InternalMessageInfo

type MsgDeleteTLDRecord struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgDeleteTLDRecord) Reset()         { *m = MsgDeleteTLDRecord{} }
func (m *MsgDeleteTLDRecord) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteTLDRecord) ProtoMessage()    {}
func (*MsgDeleteTLDRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e2442c81dc82e6, []int{4}
}
func (m *MsgDeleteTLDRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteTLDRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteTLDRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteTLDRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteTLDRecord.Merge(m, src)
}
func (m *MsgDeleteTLDRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteTLDRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteTLDRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteTLDRecord proto.InternalMessageInfo

func (m *MsgDeleteTLDRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteTLDRecord) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgDeleteTLDRecordResponse struct {
}

func (m *MsgDeleteTLDRecordResponse) Reset()         { *m = MsgDeleteTLDRecordResponse{} }
func (m *MsgDeleteTLDRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteTLDRecordResponse) ProtoMessage()    {}
func (*MsgDeleteTLDRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e2442c81dc82e6, []int{5}
}
func (m *MsgDeleteTLDRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteTLDRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteTLDRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteTLDRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteTLDRecordResponse.Merge(m, src)
}
func (m *MsgDeleteTLDRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteTLDRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteTLDRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteTLDRecordResponse proto.InternalMessageInfo

type MsgCreateSLDRecord struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgCreateSLDRecord) Reset()         { *m = MsgCreateSLDRecord{} }
func (m *MsgCreateSLDRecord) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSLDRecord) ProtoMessage()    {}
func (*MsgCreateSLDRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e2442c81dc82e6, []int{6}
}
func (m *MsgCreateSLDRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSLDRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSLDRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSLDRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSLDRecord.Merge(m, src)
}
func (m *MsgCreateSLDRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSLDRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSLDRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSLDRecord proto.InternalMessageInfo

func (m *MsgCreateSLDRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateSLDRecord) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgCreateSLDRecordResponse struct {
}

func (m *MsgCreateSLDRecordResponse) Reset()         { *m = MsgCreateSLDRecordResponse{} }
func (m *MsgCreateSLDRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSLDRecordResponse) ProtoMessage()    {}
func (*MsgCreateSLDRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e2442c81dc82e6, []int{7}
}
func (m *MsgCreateSLDRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSLDRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSLDRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSLDRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSLDRecordResponse.Merge(m, src)
}
func (m *MsgCreateSLDRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSLDRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSLDRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSLDRecordResponse proto.InternalMessageInfo

type MsgUpdateSLDRecord struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgUpdateSLDRecord) Reset()         { *m = MsgUpdateSLDRecord{} }
func (m *MsgUpdateSLDRecord) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSLDRecord) ProtoMessage()    {}
func (*MsgUpdateSLDRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e2442c81dc82e6, []int{8}
}
func (m *MsgUpdateSLDRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSLDRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSLDRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSLDRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSLDRecord.Merge(m, src)
}
func (m *MsgUpdateSLDRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSLDRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSLDRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSLDRecord proto.InternalMessageInfo

func (m *MsgUpdateSLDRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateSLDRecord) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgUpdateSLDRecordResponse struct {
}

func (m *MsgUpdateSLDRecordResponse) Reset()         { *m = MsgUpdateSLDRecordResponse{} }
func (m *MsgUpdateSLDRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSLDRecordResponse) ProtoMessage()    {}
func (*MsgUpdateSLDRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e2442c81dc82e6, []int{9}
}
func (m *MsgUpdateSLDRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSLDRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSLDRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSLDRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSLDRecordResponse.Merge(m, src)
}
func (m *MsgUpdateSLDRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSLDRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSLDRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSLDRecordResponse proto.InternalMessageInfo

type MsgDeleteSLDRecord struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgDeleteSLDRecord) Reset()         { *m = MsgDeleteSLDRecord{} }
func (m *MsgDeleteSLDRecord) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteSLDRecord) ProtoMessage()    {}
func (*MsgDeleteSLDRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e2442c81dc82e6, []int{10}
}
func (m *MsgDeleteSLDRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteSLDRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteSLDRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteSLDRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteSLDRecord.Merge(m, src)
}
func (m *MsgDeleteSLDRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteSLDRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteSLDRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteSLDRecord proto.InternalMessageInfo

func (m *MsgDeleteSLDRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteSLDRecord) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgDeleteSLDRecordResponse struct {
}

func (m *MsgDeleteSLDRecordResponse) Reset()         { *m = MsgDeleteSLDRecordResponse{} }
func (m *MsgDeleteSLDRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteSLDRecordResponse) ProtoMessage()    {}
func (*MsgDeleteSLDRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e2442c81dc82e6, []int{11}
}
func (m *MsgDeleteSLDRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteSLDRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteSLDRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteSLDRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteSLDRecordResponse.Merge(m, src)
}
func (m *MsgDeleteSLDRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteSLDRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteSLDRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteSLDRecordResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateTLDRecord)(nil), "sonrhq.core.domain.MsgCreateTLDRecord")
	proto.RegisterType((*MsgCreateTLDRecordResponse)(nil), "sonrhq.core.domain.MsgCreateTLDRecordResponse")
	proto.RegisterType((*MsgUpdateTLDRecord)(nil), "sonrhq.core.domain.MsgUpdateTLDRecord")
	proto.RegisterType((*MsgUpdateTLDRecordResponse)(nil), "sonrhq.core.domain.MsgUpdateTLDRecordResponse")
	proto.RegisterType((*MsgDeleteTLDRecord)(nil), "sonrhq.core.domain.MsgDeleteTLDRecord")
	proto.RegisterType((*MsgDeleteTLDRecordResponse)(nil), "sonrhq.core.domain.MsgDeleteTLDRecordResponse")
	proto.RegisterType((*MsgCreateSLDRecord)(nil), "sonrhq.core.domain.MsgCreateSLDRecord")
	proto.RegisterType((*MsgCreateSLDRecordResponse)(nil), "sonrhq.core.domain.MsgCreateSLDRecordResponse")
	proto.RegisterType((*MsgUpdateSLDRecord)(nil), "sonrhq.core.domain.MsgUpdateSLDRecord")
	proto.RegisterType((*MsgUpdateSLDRecordResponse)(nil), "sonrhq.core.domain.MsgUpdateSLDRecordResponse")
	proto.RegisterType((*MsgDeleteSLDRecord)(nil), "sonrhq.core.domain.MsgDeleteSLDRecord")
	proto.RegisterType((*MsgDeleteSLDRecordResponse)(nil), "sonrhq.core.domain.MsgDeleteSLDRecordResponse")
}

func init() { proto.RegisterFile("core/domain/tx.proto", fileDescriptor_d1e2442c81dc82e6) }

var fileDescriptor_d1e2442c81dc82e6 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xc1, 0x4a, 0xec, 0x30,
	0x14, 0x86, 0xdb, 0x7b, 0x19, 0xc5, 0x6c, 0x84, 0x30, 0x8b, 0x52, 0x24, 0xc8, 0x80, 0xe2, 0x2a,
	0x05, 0x7d, 0x00, 0x41, 0xbb, 0x74, 0x36, 0x3d, 0xba, 0x71, 0x37, 0xd3, 0x86, 0x4e, 0xc1, 0x69,
	0x6a, 0x52, 0xa1, 0x3e, 0x81, 0x5b, 0x1f, 0xcb, 0xe5, 0x2c, 0x5d, 0x4a, 0xfb, 0x22, 0xd2, 0xc6,
	0x51, 0x49, 0xc8, 0x10, 0xb0, 0xab, 0x92, 0xe4, 0xe7, 0x7c, 0xf4, 0xe3, 0xe7, 0xa0, 0x69, 0xca,
	0x05, 0x8b, 0x32, 0xbe, 0x5e, 0x14, 0x65, 0x54, 0x37, 0xb4, 0x12, 0xbc, 0xe6, 0x18, 0x4b, 0x5e,
	0x8a, 0xd5, 0x23, 0xed, 0x1f, 0xa9, 0x7a, 0x0c, 0x83, 0xdf, 0x49, 0xf5, 0x51, 0xe9, 0x59, 0x8c,
	0xf0, 0x5c, 0xe6, 0xd7, 0x82, 0x2d, 0x6a, 0x76, 0x7b, 0x13, 0x27, 0x2c, 0xe5, 0x22, 0xc3, 0x01,
	0xda, 0x4f, 0xfb, 0x2b, 0x2e, 0x02, 0xff, 0xd8, 0x3f, 0x3b, 0x48, 0xb6, 0x47, 0x3c, 0x45, 0x93,
	0xa2, 0xcc, 0x58, 0x13, 0xfc, 0x1b, 0xee, 0xd5, 0x61, 0x76, 0x84, 0x42, 0x73, 0x4a, 0xc2, 0x64,
	0xc5, 0x4b, 0xc9, 0xbe, 0x18, 0x77, 0x55, 0x36, 0x02, 0x43, 0x9b, 0xa2, 0x31, 0x62, 0xf6, 0xc0,
	0xfe, 0xce, 0xd0, 0xa6, 0x68, 0x0c, 0xf5, 0x97, 0x30, 0x8a, 0x2b, 0xd8, 0xe9, 0x0a, 0x46, 0x71,
	0x05, 0x3b, 0x5d, 0xc1, 0x28, 0xae, 0x0c, 0xc6, 0xf9, 0xcb, 0x04, 0xfd, 0x9f, 0xcb, 0x1c, 0x17,
	0xe8, 0x50, 0x2f, 0xd7, 0x29, 0x35, 0x1b, 0x4a, 0xcd, 0xfa, 0x84, 0xd4, 0x2d, 0xb7, 0x45, 0xf6,
	0x28, 0xbd, 0x63, 0x36, 0x94, 0x96, 0xb3, 0xa2, 0x2c, 0x6d, 0xeb, 0x51, 0x7a, 0xd5, 0x6c, 0x28,
	0x2d, 0x67, 0x45, 0x59, 0x4a, 0xf7, 0x23, 0x10, 0x1c, 0x05, 0x82, 0xa3, 0x40, 0xb0, 0x0b, 0x04,
	0x47, 0x81, 0xe0, 0x28, 0x10, 0xec, 0x02, 0xc1, 0x51, 0x20, 0x38, 0x0a, 0x34, 0x50, 0x57, 0x97,
	0x6f, 0x2d, 0xf1, 0x37, 0x2d, 0xf1, 0x3f, 0x5a, 0xe2, 0xbf, 0x76, 0xc4, 0xdb, 0x74, 0xc4, 0x7b,
	0xef, 0x88, 0x77, 0x7f, 0x92, 0x17, 0xf5, 0xea, 0x69, 0x49, 0x53, 0xbe, 0x8e, 0xd4, 0xcc, 0x68,
	0xd8, 0x93, 0xcd, 0xf7, 0x4e, 0x7d, 0xae, 0x98, 0x5c, 0xee, 0x0d, 0x9b, 0xf2, 0xe2, 0x33, 0x00,
	0x00, 0xff, 0xff, 0xd5, 0x03, 0xb2, 0x3a, 0x6f, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateTLDRecord(ctx context.Context, in *MsgCreateTLDRecord, opts ...grpc.CallOption) (*MsgCreateTLDRecordResponse, error)
	UpdateTLDRecord(ctx context.Context, in *MsgUpdateTLDRecord, opts ...grpc.CallOption) (*MsgUpdateTLDRecordResponse, error)
	DeleteTLDRecord(ctx context.Context, in *MsgDeleteTLDRecord, opts ...grpc.CallOption) (*MsgDeleteTLDRecordResponse, error)
	CreateSLDRecord(ctx context.Context, in *MsgCreateSLDRecord, opts ...grpc.CallOption) (*MsgCreateSLDRecordResponse, error)
	UpdateSLDRecord(ctx context.Context, in *MsgUpdateSLDRecord, opts ...grpc.CallOption) (*MsgUpdateSLDRecordResponse, error)
	DeleteSLDRecord(ctx context.Context, in *MsgDeleteSLDRecord, opts ...grpc.CallOption) (*MsgDeleteSLDRecordResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateTLDRecord(ctx context.Context, in *MsgCreateTLDRecord, opts ...grpc.CallOption) (*MsgCreateTLDRecordResponse, error) {
	out := new(MsgCreateTLDRecordResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.core.domain.Msg/CreateTLDRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTLDRecord(ctx context.Context, in *MsgUpdateTLDRecord, opts ...grpc.CallOption) (*MsgUpdateTLDRecordResponse, error) {
	out := new(MsgUpdateTLDRecordResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.core.domain.Msg/UpdateTLDRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteTLDRecord(ctx context.Context, in *MsgDeleteTLDRecord, opts ...grpc.CallOption) (*MsgDeleteTLDRecordResponse, error) {
	out := new(MsgDeleteTLDRecordResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.core.domain.Msg/DeleteTLDRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSLDRecord(ctx context.Context, in *MsgCreateSLDRecord, opts ...grpc.CallOption) (*MsgCreateSLDRecordResponse, error) {
	out := new(MsgCreateSLDRecordResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.core.domain.Msg/CreateSLDRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSLDRecord(ctx context.Context, in *MsgUpdateSLDRecord, opts ...grpc.CallOption) (*MsgUpdateSLDRecordResponse, error) {
	out := new(MsgUpdateSLDRecordResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.core.domain.Msg/UpdateSLDRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteSLDRecord(ctx context.Context, in *MsgDeleteSLDRecord, opts ...grpc.CallOption) (*MsgDeleteSLDRecordResponse, error) {
	out := new(MsgDeleteSLDRecordResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.core.domain.Msg/DeleteSLDRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateTLDRecord(context.Context, *MsgCreateTLDRecord) (*MsgCreateTLDRecordResponse, error)
	UpdateTLDRecord(context.Context, *MsgUpdateTLDRecord) (*MsgUpdateTLDRecordResponse, error)
	DeleteTLDRecord(context.Context, *MsgDeleteTLDRecord) (*MsgDeleteTLDRecordResponse, error)
	CreateSLDRecord(context.Context, *MsgCreateSLDRecord) (*MsgCreateSLDRecordResponse, error)
	UpdateSLDRecord(context.Context, *MsgUpdateSLDRecord) (*MsgUpdateSLDRecordResponse, error)
	DeleteSLDRecord(context.Context, *MsgDeleteSLDRecord) (*MsgDeleteSLDRecordResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateTLDRecord(ctx context.Context, req *MsgCreateTLDRecord) (*MsgCreateTLDRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTLDRecord not implemented")
}
func (*UnimplementedMsgServer) UpdateTLDRecord(ctx context.Context, req *MsgUpdateTLDRecord) (*MsgUpdateTLDRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTLDRecord not implemented")
}
func (*UnimplementedMsgServer) DeleteTLDRecord(ctx context.Context, req *MsgDeleteTLDRecord) (*MsgDeleteTLDRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTLDRecord not implemented")
}
func (*UnimplementedMsgServer) CreateSLDRecord(ctx context.Context, req *MsgCreateSLDRecord) (*MsgCreateSLDRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSLDRecord not implemented")
}
func (*UnimplementedMsgServer) UpdateSLDRecord(ctx context.Context, req *MsgUpdateSLDRecord) (*MsgUpdateSLDRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSLDRecord not implemented")
}
func (*UnimplementedMsgServer) DeleteSLDRecord(ctx context.Context, req *MsgDeleteSLDRecord) (*MsgDeleteSLDRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSLDRecord not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateTLDRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTLDRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTLDRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.core.domain.Msg/CreateTLDRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTLDRecord(ctx, req.(*MsgCreateTLDRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTLDRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTLDRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTLDRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.core.domain.Msg/UpdateTLDRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTLDRecord(ctx, req.(*MsgUpdateTLDRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteTLDRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteTLDRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteTLDRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.core.domain.Msg/DeleteTLDRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteTLDRecord(ctx, req.(*MsgDeleteTLDRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSLDRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSLDRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSLDRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.core.domain.Msg/CreateSLDRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSLDRecord(ctx, req.(*MsgCreateSLDRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSLDRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSLDRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSLDRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.core.domain.Msg/UpdateSLDRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSLDRecord(ctx, req.(*MsgUpdateSLDRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteSLDRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteSLDRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteSLDRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.core.domain.Msg/DeleteSLDRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteSLDRecord(ctx, req.(*MsgDeleteSLDRecord))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonrhq.core.domain.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTLDRecord",
			Handler:    _Msg_CreateTLDRecord_Handler,
		},
		{
			MethodName: "UpdateTLDRecord",
			Handler:    _Msg_UpdateTLDRecord_Handler,
		},
		{
			MethodName: "DeleteTLDRecord",
			Handler:    _Msg_DeleteTLDRecord_Handler,
		},
		{
			MethodName: "CreateSLDRecord",
			Handler:    _Msg_CreateSLDRecord_Handler,
		},
		{
			MethodName: "UpdateSLDRecord",
			Handler:    _Msg_UpdateSLDRecord_Handler,
		},
		{
			MethodName: "DeleteSLDRecord",
			Handler:    _Msg_DeleteSLDRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/domain/tx.proto",
}

func (m *MsgCreateTLDRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTLDRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTLDRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTLDRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTLDRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTLDRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTLDRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTLDRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTLDRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTLDRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTLDRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTLDRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteTLDRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteTLDRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteTLDRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteTLDRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteTLDRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteTLDRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateSLDRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSLDRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSLDRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSLDRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSLDRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSLDRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSLDRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSLDRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSLDRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSLDRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSLDRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSLDRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteSLDRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteSLDRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteSLDRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteSLDRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteSLDRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteSLDRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateTLDRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateTLDRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateTLDRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateTLDRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteTLDRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteTLDRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateSLDRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSLDRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSLDRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSLDRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteSLDRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteSLDRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateTLDRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTLDRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTLDRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTLDRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTLDRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTLDRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTLDRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTLDRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTLDRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTLDRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTLDRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTLDRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteTLDRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteTLDRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteTLDRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteTLDRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteTLDRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteTLDRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSLDRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSLDRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSLDRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSLDRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSLDRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSLDRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSLDRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSLDRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSLDRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSLDRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSLDRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSLDRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteSLDRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteSLDRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteSLDRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteSLDRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteSLDRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteSLDRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
