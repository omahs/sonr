// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/identity/query.proto

package typesconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	types "github.com/sonrhq/core/x/identity/types"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// QueryName is the fully-qualified name of the Query service.
	QueryName = "sonrhq.core.identity.Query"
)

// QueryClient is a client for the sonrhq.core.identity.Query service.
type QueryClient interface {
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	Params(context.Context, *connect_go.Request[types.QueryParamsRequest]) (*connect_go.Response[types.QueryParamsResponse], error)
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	Did(context.Context, *connect_go.Request[types.QueryGetDidRequest]) (*connect_go.Response[types.QueryGetDidResponse], error)
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	DidByKeyID(context.Context, *connect_go.Request[types.QueryDidByKeyIDRequest]) (*connect_go.Response[types.QueryDidByKeyIDResponse], error)
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	DidByAlsoKnownAs(context.Context, *connect_go.Request[types.QueryDidByAlsoKnownAsRequest]) (*connect_go.Response[types.QueryDidByAlsoKnownAsResponse], error)
	// Queries a list of DidByPubKey items.
	DidByPubKey(context.Context, *connect_go.Request[types.QueryDidByPubKeyRequest]) (*connect_go.Response[types.QueryDidByPubKeyResponse], error)
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	DidAll(context.Context, *connect_go.Request[types.QueryAllDidRequest]) (*connect_go.Response[types.QueryAllDidResponse], error)
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	Service(context.Context, *connect_go.Request[types.QueryGetServiceRequest]) (*connect_go.Response[types.QueryGetServiceResponse], error)
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	ServiceAll(context.Context, *connect_go.Request[types.QueryAllServiceRequest]) (*connect_go.Response[types.QueryAllServiceResponse], error)
}

// NewQueryClient constructs a client for the sonrhq.core.identity.Query service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueryClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) QueryClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &queryClient{
		params: connect_go.NewClient[types.QueryParamsRequest, types.QueryParamsResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Query/Params",
			opts...,
		),
		did: connect_go.NewClient[types.QueryGetDidRequest, types.QueryGetDidResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Query/Did",
			opts...,
		),
		didByKeyID: connect_go.NewClient[types.QueryDidByKeyIDRequest, types.QueryDidByKeyIDResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Query/DidByKeyID",
			opts...,
		),
		didByAlsoKnownAs: connect_go.NewClient[types.QueryDidByAlsoKnownAsRequest, types.QueryDidByAlsoKnownAsResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Query/DidByAlsoKnownAs",
			opts...,
		),
		didByPubKey: connect_go.NewClient[types.QueryDidByPubKeyRequest, types.QueryDidByPubKeyResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Query/DidByPubKey",
			opts...,
		),
		didAll: connect_go.NewClient[types.QueryAllDidRequest, types.QueryAllDidResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Query/DidAll",
			opts...,
		),
		service: connect_go.NewClient[types.QueryGetServiceRequest, types.QueryGetServiceResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Query/Service",
			opts...,
		),
		serviceAll: connect_go.NewClient[types.QueryAllServiceRequest, types.QueryAllServiceResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Query/ServiceAll",
			opts...,
		),
	}
}

// queryClient implements QueryClient.
type queryClient struct {
	params           *connect_go.Client[types.QueryParamsRequest, types.QueryParamsResponse]
	did              *connect_go.Client[types.QueryGetDidRequest, types.QueryGetDidResponse]
	didByKeyID       *connect_go.Client[types.QueryDidByKeyIDRequest, types.QueryDidByKeyIDResponse]
	didByAlsoKnownAs *connect_go.Client[types.QueryDidByAlsoKnownAsRequest, types.QueryDidByAlsoKnownAsResponse]
	didByPubKey      *connect_go.Client[types.QueryDidByPubKeyRequest, types.QueryDidByPubKeyResponse]
	didAll           *connect_go.Client[types.QueryAllDidRequest, types.QueryAllDidResponse]
	service          *connect_go.Client[types.QueryGetServiceRequest, types.QueryGetServiceResponse]
	serviceAll       *connect_go.Client[types.QueryAllServiceRequest, types.QueryAllServiceResponse]
}

// Params calls sonrhq.core.identity.Query.Params.
func (c *queryClient) Params(ctx context.Context, req *connect_go.Request[types.QueryParamsRequest]) (*connect_go.Response[types.QueryParamsResponse], error) {
	return c.params.CallUnary(ctx, req)
}

// Did calls sonrhq.core.identity.Query.Did.
func (c *queryClient) Did(ctx context.Context, req *connect_go.Request[types.QueryGetDidRequest]) (*connect_go.Response[types.QueryGetDidResponse], error) {
	return c.did.CallUnary(ctx, req)
}

// DidByKeyID calls sonrhq.core.identity.Query.DidByKeyID.
func (c *queryClient) DidByKeyID(ctx context.Context, req *connect_go.Request[types.QueryDidByKeyIDRequest]) (*connect_go.Response[types.QueryDidByKeyIDResponse], error) {
	return c.didByKeyID.CallUnary(ctx, req)
}

// DidByAlsoKnownAs calls sonrhq.core.identity.Query.DidByAlsoKnownAs.
func (c *queryClient) DidByAlsoKnownAs(ctx context.Context, req *connect_go.Request[types.QueryDidByAlsoKnownAsRequest]) (*connect_go.Response[types.QueryDidByAlsoKnownAsResponse], error) {
	return c.didByAlsoKnownAs.CallUnary(ctx, req)
}

// DidByPubKey calls sonrhq.core.identity.Query.DidByPubKey.
func (c *queryClient) DidByPubKey(ctx context.Context, req *connect_go.Request[types.QueryDidByPubKeyRequest]) (*connect_go.Response[types.QueryDidByPubKeyResponse], error) {
	return c.didByPubKey.CallUnary(ctx, req)
}

// DidAll calls sonrhq.core.identity.Query.DidAll.
func (c *queryClient) DidAll(ctx context.Context, req *connect_go.Request[types.QueryAllDidRequest]) (*connect_go.Response[types.QueryAllDidResponse], error) {
	return c.didAll.CallUnary(ctx, req)
}

// Service calls sonrhq.core.identity.Query.Service.
func (c *queryClient) Service(ctx context.Context, req *connect_go.Request[types.QueryGetServiceRequest]) (*connect_go.Response[types.QueryGetServiceResponse], error) {
	return c.service.CallUnary(ctx, req)
}

// ServiceAll calls sonrhq.core.identity.Query.ServiceAll.
func (c *queryClient) ServiceAll(ctx context.Context, req *connect_go.Request[types.QueryAllServiceRequest]) (*connect_go.Response[types.QueryAllServiceResponse], error) {
	return c.serviceAll.CallUnary(ctx, req)
}

// QueryHandler is an implementation of the sonrhq.core.identity.Query service.
type QueryHandler interface {
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	Params(context.Context, *connect_go.Request[types.QueryParamsRequest]) (*connect_go.Response[types.QueryParamsResponse], error)
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	Did(context.Context, *connect_go.Request[types.QueryGetDidRequest]) (*connect_go.Response[types.QueryGetDidResponse], error)
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	DidByKeyID(context.Context, *connect_go.Request[types.QueryDidByKeyIDRequest]) (*connect_go.Response[types.QueryDidByKeyIDResponse], error)
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	DidByAlsoKnownAs(context.Context, *connect_go.Request[types.QueryDidByAlsoKnownAsRequest]) (*connect_go.Response[types.QueryDidByAlsoKnownAsResponse], error)
	// Queries a list of DidByPubKey items.
	DidByPubKey(context.Context, *connect_go.Request[types.QueryDidByPubKeyRequest]) (*connect_go.Response[types.QueryDidByPubKeyResponse], error)
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	DidAll(context.Context, *connect_go.Request[types.QueryAllDidRequest]) (*connect_go.Response[types.QueryAllDidResponse], error)
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	Service(context.Context, *connect_go.Request[types.QueryGetServiceRequest]) (*connect_go.Response[types.QueryGetServiceResponse], error)
	// #### {{.ResponseType.Name}}
	// | Name | Type | Description |
	// | ---- | ---- | ----------- |{{range .ResponseType.Fields}}
	// | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	ServiceAll(context.Context, *connect_go.Request[types.QueryAllServiceRequest]) (*connect_go.Response[types.QueryAllServiceResponse], error)
}

// NewQueryHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueryHandler(svc QueryHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/sonrhq.core.identity.Query/Params", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Query/Params",
		svc.Params,
		opts...,
	))
	mux.Handle("/sonrhq.core.identity.Query/Did", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Query/Did",
		svc.Did,
		opts...,
	))
	mux.Handle("/sonrhq.core.identity.Query/DidByKeyID", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Query/DidByKeyID",
		svc.DidByKeyID,
		opts...,
	))
	mux.Handle("/sonrhq.core.identity.Query/DidByAlsoKnownAs", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Query/DidByAlsoKnownAs",
		svc.DidByAlsoKnownAs,
		opts...,
	))
	mux.Handle("/sonrhq.core.identity.Query/DidByPubKey", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Query/DidByPubKey",
		svc.DidByPubKey,
		opts...,
	))
	mux.Handle("/sonrhq.core.identity.Query/DidAll", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Query/DidAll",
		svc.DidAll,
		opts...,
	))
	mux.Handle("/sonrhq.core.identity.Query/Service", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Query/Service",
		svc.Service,
		opts...,
	))
	mux.Handle("/sonrhq.core.identity.Query/ServiceAll", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Query/ServiceAll",
		svc.ServiceAll,
		opts...,
	))
	return "/sonrhq.core.identity.Query/", mux
}

// UnimplementedQueryHandler returns CodeUnimplemented from all methods.
type UnimplementedQueryHandler struct{}

func (UnimplementedQueryHandler) Params(context.Context, *connect_go.Request[types.QueryParamsRequest]) (*connect_go.Response[types.QueryParamsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Query.Params is not implemented"))
}

func (UnimplementedQueryHandler) Did(context.Context, *connect_go.Request[types.QueryGetDidRequest]) (*connect_go.Response[types.QueryGetDidResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Query.Did is not implemented"))
}

func (UnimplementedQueryHandler) DidByKeyID(context.Context, *connect_go.Request[types.QueryDidByKeyIDRequest]) (*connect_go.Response[types.QueryDidByKeyIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Query.DidByKeyID is not implemented"))
}

func (UnimplementedQueryHandler) DidByAlsoKnownAs(context.Context, *connect_go.Request[types.QueryDidByAlsoKnownAsRequest]) (*connect_go.Response[types.QueryDidByAlsoKnownAsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Query.DidByAlsoKnownAs is not implemented"))
}

func (UnimplementedQueryHandler) DidByPubKey(context.Context, *connect_go.Request[types.QueryDidByPubKeyRequest]) (*connect_go.Response[types.QueryDidByPubKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Query.DidByPubKey is not implemented"))
}

func (UnimplementedQueryHandler) DidAll(context.Context, *connect_go.Request[types.QueryAllDidRequest]) (*connect_go.Response[types.QueryAllDidResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Query.DidAll is not implemented"))
}

func (UnimplementedQueryHandler) Service(context.Context, *connect_go.Request[types.QueryGetServiceRequest]) (*connect_go.Response[types.QueryGetServiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Query.Service is not implemented"))
}

func (UnimplementedQueryHandler) ServiceAll(context.Context, *connect_go.Request[types.QueryAllServiceRequest]) (*connect_go.Response[types.QueryAllServiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Query.ServiceAll is not implemented"))
}
