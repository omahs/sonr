// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/identity/tx.proto

package typesconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	types "github.com/sonrhq/core/x/identity/types"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MsgName is the fully-qualified name of the Msg service.
	MsgName = "sonrhq.core.identity.Msg"
)

// MsgClient is a client for the sonrhq.core.identity.Msg service.
type MsgClient interface {
	CreateDidDocument(context.Context, *connect_go.Request[types.MsgCreateDidDocument]) (*connect_go.Response[types.MsgCreateDidDocumentResponse], error)
	UpdateDidDocument(context.Context, *connect_go.Request[types.MsgUpdateDidDocument]) (*connect_go.Response[types.MsgUpdateDidDocumentResponse], error)
	DeleteDidDocument(context.Context, *connect_go.Request[types.MsgDeleteDidDocument]) (*connect_go.Response[types.MsgDeleteDidDocumentResponse], error)
	RegisterService(context.Context, *connect_go.Request[types.MsgRegisterService]) (*connect_go.Response[types.MsgRegisterServiceResponse], error)
	UpdateService(context.Context, *connect_go.Request[types.MsgUpdateService]) (*connect_go.Response[types.MsgUpdateServiceResponse], error)
	DeactivateService(context.Context, *connect_go.Request[types.MsgDeactivateService]) (*connect_go.Response[types.MsgDeactivateServiceResponse], error)
}

// NewMsgClient constructs a client for the sonrhq.core.identity.Msg service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMsgClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MsgClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &msgClient{
		createDidDocument: connect_go.NewClient[types.MsgCreateDidDocument, types.MsgCreateDidDocumentResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Msg/CreateDidDocument",
			opts...,
		),
		updateDidDocument: connect_go.NewClient[types.MsgUpdateDidDocument, types.MsgUpdateDidDocumentResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Msg/UpdateDidDocument",
			opts...,
		),
		deleteDidDocument: connect_go.NewClient[types.MsgDeleteDidDocument, types.MsgDeleteDidDocumentResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Msg/DeleteDidDocument",
			opts...,
		),
		registerService: connect_go.NewClient[types.MsgRegisterService, types.MsgRegisterServiceResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Msg/RegisterService",
			opts...,
		),
		updateService: connect_go.NewClient[types.MsgUpdateService, types.MsgUpdateServiceResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Msg/UpdateService",
			opts...,
		),
		deactivateService: connect_go.NewClient[types.MsgDeactivateService, types.MsgDeactivateServiceResponse](
			httpClient,
			baseURL+"/sonrhq.core.identity.Msg/DeactivateService",
			opts...,
		),
	}
}

// msgClient implements MsgClient.
type msgClient struct {
	createDidDocument *connect_go.Client[types.MsgCreateDidDocument, types.MsgCreateDidDocumentResponse]
	updateDidDocument *connect_go.Client[types.MsgUpdateDidDocument, types.MsgUpdateDidDocumentResponse]
	deleteDidDocument *connect_go.Client[types.MsgDeleteDidDocument, types.MsgDeleteDidDocumentResponse]
	registerService   *connect_go.Client[types.MsgRegisterService, types.MsgRegisterServiceResponse]
	updateService     *connect_go.Client[types.MsgUpdateService, types.MsgUpdateServiceResponse]
	deactivateService *connect_go.Client[types.MsgDeactivateService, types.MsgDeactivateServiceResponse]
}

// CreateDidDocument calls sonrhq.core.identity.Msg.CreateDidDocument.
func (c *msgClient) CreateDidDocument(ctx context.Context, req *connect_go.Request[types.MsgCreateDidDocument]) (*connect_go.Response[types.MsgCreateDidDocumentResponse], error) {
	return c.createDidDocument.CallUnary(ctx, req)
}

// UpdateDidDocument calls sonrhq.core.identity.Msg.UpdateDidDocument.
func (c *msgClient) UpdateDidDocument(ctx context.Context, req *connect_go.Request[types.MsgUpdateDidDocument]) (*connect_go.Response[types.MsgUpdateDidDocumentResponse], error) {
	return c.updateDidDocument.CallUnary(ctx, req)
}

// DeleteDidDocument calls sonrhq.core.identity.Msg.DeleteDidDocument.
func (c *msgClient) DeleteDidDocument(ctx context.Context, req *connect_go.Request[types.MsgDeleteDidDocument]) (*connect_go.Response[types.MsgDeleteDidDocumentResponse], error) {
	return c.deleteDidDocument.CallUnary(ctx, req)
}

// RegisterService calls sonrhq.core.identity.Msg.RegisterService.
func (c *msgClient) RegisterService(ctx context.Context, req *connect_go.Request[types.MsgRegisterService]) (*connect_go.Response[types.MsgRegisterServiceResponse], error) {
	return c.registerService.CallUnary(ctx, req)
}

// UpdateService calls sonrhq.core.identity.Msg.UpdateService.
func (c *msgClient) UpdateService(ctx context.Context, req *connect_go.Request[types.MsgUpdateService]) (*connect_go.Response[types.MsgUpdateServiceResponse], error) {
	return c.updateService.CallUnary(ctx, req)
}

// DeactivateService calls sonrhq.core.identity.Msg.DeactivateService.
func (c *msgClient) DeactivateService(ctx context.Context, req *connect_go.Request[types.MsgDeactivateService]) (*connect_go.Response[types.MsgDeactivateServiceResponse], error) {
	return c.deactivateService.CallUnary(ctx, req)
}

// MsgHandler is an implementation of the sonrhq.core.identity.Msg service.
type MsgHandler interface {
	CreateDidDocument(context.Context, *connect_go.Request[types.MsgCreateDidDocument]) (*connect_go.Response[types.MsgCreateDidDocumentResponse], error)
	UpdateDidDocument(context.Context, *connect_go.Request[types.MsgUpdateDidDocument]) (*connect_go.Response[types.MsgUpdateDidDocumentResponse], error)
	DeleteDidDocument(context.Context, *connect_go.Request[types.MsgDeleteDidDocument]) (*connect_go.Response[types.MsgDeleteDidDocumentResponse], error)
	RegisterService(context.Context, *connect_go.Request[types.MsgRegisterService]) (*connect_go.Response[types.MsgRegisterServiceResponse], error)
	UpdateService(context.Context, *connect_go.Request[types.MsgUpdateService]) (*connect_go.Response[types.MsgUpdateServiceResponse], error)
	DeactivateService(context.Context, *connect_go.Request[types.MsgDeactivateService]) (*connect_go.Response[types.MsgDeactivateServiceResponse], error)
}

// NewMsgHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMsgHandler(svc MsgHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/sonrhq.core.identity.Msg/CreateDidDocument", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Msg/CreateDidDocument",
		svc.CreateDidDocument,
		opts...,
	))
	mux.Handle("/sonrhq.core.identity.Msg/UpdateDidDocument", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Msg/UpdateDidDocument",
		svc.UpdateDidDocument,
		opts...,
	))
	mux.Handle("/sonrhq.core.identity.Msg/DeleteDidDocument", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Msg/DeleteDidDocument",
		svc.DeleteDidDocument,
		opts...,
	))
	mux.Handle("/sonrhq.core.identity.Msg/RegisterService", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Msg/RegisterService",
		svc.RegisterService,
		opts...,
	))
	mux.Handle("/sonrhq.core.identity.Msg/UpdateService", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Msg/UpdateService",
		svc.UpdateService,
		opts...,
	))
	mux.Handle("/sonrhq.core.identity.Msg/DeactivateService", connect_go.NewUnaryHandler(
		"/sonrhq.core.identity.Msg/DeactivateService",
		svc.DeactivateService,
		opts...,
	))
	return "/sonrhq.core.identity.Msg/", mux
}

// UnimplementedMsgHandler returns CodeUnimplemented from all methods.
type UnimplementedMsgHandler struct{}

func (UnimplementedMsgHandler) CreateDidDocument(context.Context, *connect_go.Request[types.MsgCreateDidDocument]) (*connect_go.Response[types.MsgCreateDidDocumentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Msg.CreateDidDocument is not implemented"))
}

func (UnimplementedMsgHandler) UpdateDidDocument(context.Context, *connect_go.Request[types.MsgUpdateDidDocument]) (*connect_go.Response[types.MsgUpdateDidDocumentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Msg.UpdateDidDocument is not implemented"))
}

func (UnimplementedMsgHandler) DeleteDidDocument(context.Context, *connect_go.Request[types.MsgDeleteDidDocument]) (*connect_go.Response[types.MsgDeleteDidDocumentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Msg.DeleteDidDocument is not implemented"))
}

func (UnimplementedMsgHandler) RegisterService(context.Context, *connect_go.Request[types.MsgRegisterService]) (*connect_go.Response[types.MsgRegisterServiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Msg.RegisterService is not implemented"))
}

func (UnimplementedMsgHandler) UpdateService(context.Context, *connect_go.Request[types.MsgUpdateService]) (*connect_go.Response[types.MsgUpdateServiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Msg.UpdateService is not implemented"))
}

func (UnimplementedMsgHandler) DeactivateService(context.Context, *connect_go.Request[types.MsgDeactivateService]) (*connect_go.Response[types.MsgDeactivateServiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sonrhq.core.identity.Msg.DeactivateService is not implemented"))
}
